
Manual de Instalación y Despliegue del Proyecto en Windows
1. Preparación de Prerrequisitos del Sistema
1.1. Instalar Python: Descargar e instalar Python desde python.org. Marcar "Add Python to PATH" durante la instalación.
1.2. Instalar PostgreSQL: Descargar e instalar desde postgresql.org. Guardar la contraseña del superusuario postgres.
1.3. Instalar Git: Descargar e instalar Git para Windows desde git-scm.com/downloads.
1.4. Instalar Node.js: Descargar e instalar la versión LTS desde nodejs.org.
2. Configuración de la Base de Datos PostgreSQL con PGVector
2.1. Abrir la terminal psql o el gestor de bases de datos de su preferencia (ej. pgAdmin).
2.2. Conectarse a la base de datos destino.
2.3. Ejecutar la siguiente sentencia SQL para habilitar la extensión PGVector:
Generated sql
CREATE EXTENSION IF NOT EXISTS vector;
Use code with caution.
SQL
3. Instalación de Redis a través de WSL (Subsistema de Windows para Linux)
3.1. Abrir PowerShell como Administrador.
3.2. Establecer WSL 1 como versión por defecto para compatibilidad en entornos virtualizados:
Generated powershell
wsl --set-default-version 1
Use code with caution.
Powershell
3.3. Instalar la distribución Ubuntu:
Generated powershell
wsl --install -d Ubuntu
Use code with caution.
Powershell
3.4. Al finalizar, el sistema pedirá crear un usuario y contraseña para Ubuntu. Completar este paso.
3.5. Iniciar sesión en WSL/Ubuntu: Abrir una nueva terminal y ejecutar:
Generated powershell
wsl
Use code with caution.
Powershell
3.6. Instalar y levantar el servidor Redis (ejecutar estos comandos dentro de la sesión de WSL/Ubuntu):
Generated bash
# Actualizar los repositorios de paquetes
sudo apt update

# Instalar el servidor Redis
sudo apt install redis-server -y

# Iniciar el servicio de Redis
sudo service redis-server start
Use code with caution.
Bash
Nota: El servicio de Redis deberá ser iniciado manualmente con sudo service redis-server start cada vez que la máquina se reinicie.
4. Despliegue del Backend (Aplicación Python)
4.1. Abrir una nueva terminal de PowerShell.
4.2. Clonar el repositorio del proyecto:
Generated powershell
git clone <URL_DEL_REPOSITORIO>
cd <NOMBRE_DE_LA_CARPETA_DEL_PROYECTO>
Use code with caution.
Powershell
4.3. Crear y activar un entorno virtual de Python:
Generated powershell
python -m venv .venv
.\.venv\Scripts\activate
Use code with caution.
Powershell
4.4. Instalar todas las dependencias de Python desde el archivo de requerimientos:
Generated powershell
pip install -r requirements.txt
Use code with caution.
Powershell
4.5. Ejecutar el servidor del backend:
Generated powershell
uvicorn app.main:app --host 0.0.0.0 --port 8000
Use code with caution.
Powershell
El backend quedará corriendo en esta terminal.
5. Despliegue del Frontend
5.1. Abrir una tercera terminal de PowerShell.
5.2. Navegar a la carpeta del frontend:
Generated powershell
cd <NOMBRE_DE_LA_CARPETA_DEL_PROYECTO>/frontend
Use code with caution.
Powershell
5.3. Instalar las dependencias de Node.js (solo la primera vez):
Generated bash
npm install
Use code with caution.
Bash
5.4. Ejecutar el servidor de desarrollo del frontend:
Generated bash
npm run dev
Use code with caution.
Bash
El frontend quedará corriendo en esta terminal.