/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Mi Chatbot IA Personalizable
 * Un backend API en Python (FastAPI) para un chatbot avanzado con IA, configurable, capaz de conectarse a diversas fuentes de contexto y con gesti√≥n de permisos para administradores.
 * OpenAPI spec version: 0.2.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AdminPanelMenuCreate,
  AdminPanelMenuResponse,
  AdminPanelMenuUpdate,
  AdminRoleMenuPermissionCreate,
  AdminRoleMenuPermissionResponse,
  ApiClientCreate,
  ApiClientResponse,
  ApiClientUpdate,
  ApiClientWithPlainKeyResponse,
  AppUserLocalCreate,
  AppUserResponse,
  AppUserUpdate,
  AuthorizedMenuResponse,
  BodyLoginAdminUnificadoApiV1AdminAuthLoginPost,
  ChatRequest,
  ChatResponse,
  ContextDefinitionCreate,
  ContextDefinitionResponse,
  ContextDefinitionUpdate,
  DatabaseConnectionCreate,
  DatabaseConnectionResponse,
  DatabaseConnectionUpdate,
  DbInspectionResponse,
  DocumentSourceCreate,
  DocumentSourceResponse,
  DocumentSourceUpdate,
  GeneratePromptRequest,
  GeneratedPromptSetResponse,
  GetAllMenuItemsApiV1AdminMenusGetParams,
  HTTPValidationError,
  HumanAgentCreate,
  HumanAgentGroupCreate,
  HumanAgentGroupResponse,
  HumanAgentGroupUpdate,
  HumanAgentResponse,
  HumanAgentUpdate,
  LLMModelConfigCreate,
  LLMModelConfigResponse,
  LLMModelConfigUpdate,
  MFASetupConfirmRequestSchema,
  MFASetupInitiateResponseSchema,
  MFAVerifyRequestSchema,
  MfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPost200,
  ReadAllApiClientsParams,
  ReadAllAppUsersEndpointApiV1AdminAppUserManagementGetParams,
  ReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGetParams,
  ReadAllDbConnectionsApiV1AdminDbConnectionsGetParams,
  ReadAllDocumentSourcesApiV1AdminDocSourcesGetParams,
  ReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGetParams,
  ReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGetParams,
  ReadAllLlmModelConfigsApiV1AdminLlmModelsGetParams,
  ReadAllRolesEndpointApiV1AdminRolesGetParams,
  ReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGetParams,
  ReadUsersApiV1UsersGetParams,
  RoleCreate,
  RoleResponse,
  RoleUpdate,
  TokenSchema,
  UserCreate,
  UserResponse,
  VirtualAgentProfileCreate,
  VirtualAgentProfileResponse,
  VirtualAgentProfileUpdate
} from './schemas';

import { axiosInstance } from './axiosInstance';
import type { ErrorType } from './axiosInstance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Process Chat Message
 */
export const processChatMessageApiV1ChatPost = (
    chatRequest: ChatRequest,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ChatResponse>(
      {url: `/api/v1/chat/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: chatRequest, signal
    },
      options);
    }
  


export const getProcessChatMessageApiV1ChatPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processChatMessageApiV1ChatPost>>, TError,{data: ChatRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof processChatMessageApiV1ChatPost>>, TError,{data: ChatRequest}, TContext> => {

const mutationKey = ['processChatMessageApiV1ChatPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof processChatMessageApiV1ChatPost>>, {data: ChatRequest}> = (props) => {
          const {data} = props ?? {};

          return  processChatMessageApiV1ChatPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProcessChatMessageApiV1ChatPostMutationResult = NonNullable<Awaited<ReturnType<typeof processChatMessageApiV1ChatPost>>>
    export type ProcessChatMessageApiV1ChatPostMutationBody = ChatRequest
    export type ProcessChatMessageApiV1ChatPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Process Chat Message
 */
export const useProcessChatMessageApiV1ChatPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processChatMessageApiV1ChatPost>>, TError,{data: ChatRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof processChatMessageApiV1ChatPost>>,
        TError,
        {data: ChatRequest},
        TContext
      > => {

      const mutationOptions = getProcessChatMessageApiV1ChatPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Crea un nuevo usuario.
 * @summary Create New User
 */
export const createNewUserApiV1UsersPost = (
    userCreate: UserCreate,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<UserResponse>(
      {url: `/api/v1/users/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userCreate, signal
    },
      options);
    }
  


export const getCreateNewUserApiV1UsersPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewUserApiV1UsersPost>>, TError,{data: UserCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createNewUserApiV1UsersPost>>, TError,{data: UserCreate}, TContext> => {

const mutationKey = ['createNewUserApiV1UsersPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createNewUserApiV1UsersPost>>, {data: UserCreate}> = (props) => {
          const {data} = props ?? {};

          return  createNewUserApiV1UsersPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateNewUserApiV1UsersPostMutationResult = NonNullable<Awaited<ReturnType<typeof createNewUserApiV1UsersPost>>>
    export type CreateNewUserApiV1UsersPostMutationBody = UserCreate
    export type CreateNewUserApiV1UsersPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Create New User
 */
export const useCreateNewUserApiV1UsersPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewUserApiV1UsersPost>>, TError,{data: UserCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createNewUserApiV1UsersPost>>,
        TError,
        {data: UserCreate},
        TContext
      > => {

      const mutationOptions = getCreateNewUserApiV1UsersPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Obtiene una lista de usuarios (paginada).
 * @summary Read Users
 */
export const readUsersApiV1UsersGet = (
    params?: ReadUsersApiV1UsersGetParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<UserResponse[]>(
      {url: `/api/v1/users/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getReadUsersApiV1UsersGetQueryKey = (params?: ReadUsersApiV1UsersGetParams,) => {
    return [`/api/v1/users/`, ...(params ? [params]: [])] as const;
    }

    
export const getReadUsersApiV1UsersGetQueryOptions = <TData = Awaited<ReturnType<typeof readUsersApiV1UsersGet>>, TError = ErrorType<HTTPValidationError>>(params?: ReadUsersApiV1UsersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUsersApiV1UsersGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadUsersApiV1UsersGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readUsersApiV1UsersGet>>> = ({ signal }) => readUsersApiV1UsersGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readUsersApiV1UsersGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadUsersApiV1UsersGetQueryResult = NonNullable<Awaited<ReturnType<typeof readUsersApiV1UsersGet>>>
export type ReadUsersApiV1UsersGetQueryError = ErrorType<HTTPValidationError>


export function useReadUsersApiV1UsersGet<TData = Awaited<ReturnType<typeof readUsersApiV1UsersGet>>, TError = ErrorType<HTTPValidationError>>(
 params: undefined |  ReadUsersApiV1UsersGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUsersApiV1UsersGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUsersApiV1UsersGet>>,
          TError,
          Awaited<ReturnType<typeof readUsersApiV1UsersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadUsersApiV1UsersGet<TData = Awaited<ReturnType<typeof readUsersApiV1UsersGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadUsersApiV1UsersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUsersApiV1UsersGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUsersApiV1UsersGet>>,
          TError,
          Awaited<ReturnType<typeof readUsersApiV1UsersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadUsersApiV1UsersGet<TData = Awaited<ReturnType<typeof readUsersApiV1UsersGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadUsersApiV1UsersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUsersApiV1UsersGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Users
 */

export function useReadUsersApiV1UsersGet<TData = Awaited<ReturnType<typeof readUsersApiV1UsersGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadUsersApiV1UsersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUsersApiV1UsersGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadUsersApiV1UsersGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Obtiene un usuario por su ID.
 * @summary Read User By Id
 */
export const readUserByIdApiV1UsersUserIdGet = (
    userId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<UserResponse>(
      {url: `/api/v1/users/${userId}`, method: 'GET', signal
    },
      options);
    }
  

export const getReadUserByIdApiV1UsersUserIdGetQueryKey = (userId: number,) => {
    return [`/api/v1/users/${userId}`] as const;
    }

    
export const getReadUserByIdApiV1UsersUserIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>, TError = ErrorType<HTTPValidationError>>(userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadUserByIdApiV1UsersUserIdGetQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>> = ({ signal }) => readUserByIdApiV1UsersUserIdGet(userId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadUserByIdApiV1UsersUserIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>>
export type ReadUserByIdApiV1UsersUserIdGetQueryError = ErrorType<HTTPValidationError>


export function useReadUserByIdApiV1UsersUserIdGet<TData = Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>, TError = ErrorType<HTTPValidationError>>(
 userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadUserByIdApiV1UsersUserIdGet<TData = Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>, TError = ErrorType<HTTPValidationError>>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadUserByIdApiV1UsersUserIdGet<TData = Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>, TError = ErrorType<HTTPValidationError>>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read User By Id
 */

export function useReadUserByIdApiV1UsersUserIdGet<TData = Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>, TError = ErrorType<HTTPValidationError>>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadUserByIdApiV1UsersUserIdGetQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Login Admin Unificado
 */
export const loginAdminUnificadoApiV1AdminAuthLoginPost = (
    bodyLoginAdminUnificadoApiV1AdminAuthLoginPost: BodyLoginAdminUnificadoApiV1AdminAuthLoginPost,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      const formUrlEncoded = new URLSearchParams();
if(bodyLoginAdminUnificadoApiV1AdminAuthLoginPost.grant_type !== undefined && bodyLoginAdminUnificadoApiV1AdminAuthLoginPost.grant_type !== null) {
 formUrlEncoded.append(`grant_type`, bodyLoginAdminUnificadoApiV1AdminAuthLoginPost.grant_type)
 }
formUrlEncoded.append(`username`, bodyLoginAdminUnificadoApiV1AdminAuthLoginPost.username)
formUrlEncoded.append(`password`, bodyLoginAdminUnificadoApiV1AdminAuthLoginPost.password)
if(bodyLoginAdminUnificadoApiV1AdminAuthLoginPost.scope !== undefined) {
 formUrlEncoded.append(`scope`, bodyLoginAdminUnificadoApiV1AdminAuthLoginPost.scope)
 }
if(bodyLoginAdminUnificadoApiV1AdminAuthLoginPost.client_id !== undefined && bodyLoginAdminUnificadoApiV1AdminAuthLoginPost.client_id !== null) {
 formUrlEncoded.append(`client_id`, bodyLoginAdminUnificadoApiV1AdminAuthLoginPost.client_id)
 }
if(bodyLoginAdminUnificadoApiV1AdminAuthLoginPost.client_secret !== undefined && bodyLoginAdminUnificadoApiV1AdminAuthLoginPost.client_secret !== null) {
 formUrlEncoded.append(`client_secret`, bodyLoginAdminUnificadoApiV1AdminAuthLoginPost.client_secret)
 }

      return axiosInstance<unknown>(
      {url: `/api/v1/admin/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded, signal
    },
      options);
    }
  


export const getLoginAdminUnificadoApiV1AdminAuthLoginPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginAdminUnificadoApiV1AdminAuthLoginPost>>, TError,{data: BodyLoginAdminUnificadoApiV1AdminAuthLoginPost}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof loginAdminUnificadoApiV1AdminAuthLoginPost>>, TError,{data: BodyLoginAdminUnificadoApiV1AdminAuthLoginPost}, TContext> => {

const mutationKey = ['loginAdminUnificadoApiV1AdminAuthLoginPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginAdminUnificadoApiV1AdminAuthLoginPost>>, {data: BodyLoginAdminUnificadoApiV1AdminAuthLoginPost}> = (props) => {
          const {data} = props ?? {};

          return  loginAdminUnificadoApiV1AdminAuthLoginPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginAdminUnificadoApiV1AdminAuthLoginPostMutationResult = NonNullable<Awaited<ReturnType<typeof loginAdminUnificadoApiV1AdminAuthLoginPost>>>
    export type LoginAdminUnificadoApiV1AdminAuthLoginPostMutationBody = BodyLoginAdminUnificadoApiV1AdminAuthLoginPost
    export type LoginAdminUnificadoApiV1AdminAuthLoginPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Login Admin Unificado
 */
export const useLoginAdminUnificadoApiV1AdminAuthLoginPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginAdminUnificadoApiV1AdminAuthLoginPost>>, TError,{data: BodyLoginAdminUnificadoApiV1AdminAuthLoginPost}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof loginAdminUnificadoApiV1AdminAuthLoginPost>>,
        TError,
        {data: BodyLoginAdminUnificadoApiV1AdminAuthLoginPost},
        TContext
      > => {

      const mutationOptions = getLoginAdminUnificadoApiV1AdminAuthLoginPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Verify Mfa Code After Ad Login
 */
export const verifyMfaCodeAfterAdLoginApiV1AdminAuthVerifyMfaPost = (
    mFAVerifyRequestSchema: MFAVerifyRequestSchema,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<TokenSchema>(
      {url: `/api/v1/admin/auth/verify-mfa`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mFAVerifyRequestSchema, signal
    },
      options);
    }
  


export const getVerifyMfaCodeAfterAdLoginApiV1AdminAuthVerifyMfaPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyMfaCodeAfterAdLoginApiV1AdminAuthVerifyMfaPost>>, TError,{data: MFAVerifyRequestSchema}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof verifyMfaCodeAfterAdLoginApiV1AdminAuthVerifyMfaPost>>, TError,{data: MFAVerifyRequestSchema}, TContext> => {

const mutationKey = ['verifyMfaCodeAfterAdLoginApiV1AdminAuthVerifyMfaPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof verifyMfaCodeAfterAdLoginApiV1AdminAuthVerifyMfaPost>>, {data: MFAVerifyRequestSchema}> = (props) => {
          const {data} = props ?? {};

          return  verifyMfaCodeAfterAdLoginApiV1AdminAuthVerifyMfaPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type VerifyMfaCodeAfterAdLoginApiV1AdminAuthVerifyMfaPostMutationResult = NonNullable<Awaited<ReturnType<typeof verifyMfaCodeAfterAdLoginApiV1AdminAuthVerifyMfaPost>>>
    export type VerifyMfaCodeAfterAdLoginApiV1AdminAuthVerifyMfaPostMutationBody = MFAVerifyRequestSchema
    export type VerifyMfaCodeAfterAdLoginApiV1AdminAuthVerifyMfaPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Verify Mfa Code After Ad Login
 */
export const useVerifyMfaCodeAfterAdLoginApiV1AdminAuthVerifyMfaPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyMfaCodeAfterAdLoginApiV1AdminAuthVerifyMfaPost>>, TError,{data: MFAVerifyRequestSchema}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof verifyMfaCodeAfterAdLoginApiV1AdminAuthVerifyMfaPost>>,
        TError,
        {data: MFAVerifyRequestSchema},
        TContext
      > => {

      const mutationOptions = getVerifyMfaCodeAfterAdLoginApiV1AdminAuthVerifyMfaPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Mfa Setup Initiate
 */
export const mfaSetupInitiateApiV1AdminAuthMfaSetupInitiatePost = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<MFASetupInitiateResponseSchema>(
      {url: `/api/v1/admin/auth/mfa/setup-initiate`, method: 'POST', signal
    },
      options);
    }
  


export const getMfaSetupInitiateApiV1AdminAuthMfaSetupInitiatePostMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mfaSetupInitiateApiV1AdminAuthMfaSetupInitiatePost>>, TError,void, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof mfaSetupInitiateApiV1AdminAuthMfaSetupInitiatePost>>, TError,void, TContext> => {

const mutationKey = ['mfaSetupInitiateApiV1AdminAuthMfaSetupInitiatePost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof mfaSetupInitiateApiV1AdminAuthMfaSetupInitiatePost>>, void> = () => {
          

          return  mfaSetupInitiateApiV1AdminAuthMfaSetupInitiatePost(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MfaSetupInitiateApiV1AdminAuthMfaSetupInitiatePostMutationResult = NonNullable<Awaited<ReturnType<typeof mfaSetupInitiateApiV1AdminAuthMfaSetupInitiatePost>>>
    
    export type MfaSetupInitiateApiV1AdminAuthMfaSetupInitiatePostMutationError = ErrorType<unknown>

    /**
 * @summary Mfa Setup Initiate
 */
export const useMfaSetupInitiateApiV1AdminAuthMfaSetupInitiatePost = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mfaSetupInitiateApiV1AdminAuthMfaSetupInitiatePost>>, TError,void, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof mfaSetupInitiateApiV1AdminAuthMfaSetupInitiatePost>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getMfaSetupInitiateApiV1AdminAuthMfaSetupInitiatePostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Mfa Setup Confirm
 */
export const mfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPost = (
    mFASetupConfirmRequestSchema: MFASetupConfirmRequestSchema,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<MfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPost200>(
      {url: `/api/v1/admin/auth/mfa/setup-confirm`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mFASetupConfirmRequestSchema, signal
    },
      options);
    }
  


export const getMfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPost>>, TError,{data: MFASetupConfirmRequestSchema}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof mfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPost>>, TError,{data: MFASetupConfirmRequestSchema}, TContext> => {

const mutationKey = ['mfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof mfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPost>>, {data: MFASetupConfirmRequestSchema}> = (props) => {
          const {data} = props ?? {};

          return  mfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPostMutationResult = NonNullable<Awaited<ReturnType<typeof mfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPost>>>
    export type MfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPostMutationBody = MFASetupConfirmRequestSchema
    export type MfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Mfa Setup Confirm
 */
export const useMfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPost>>, TError,{data: MFASetupConfirmRequestSchema}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof mfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPost>>,
        TError,
        {data: MFASetupConfirmRequestSchema},
        TContext
      > => {

      const mutationOptions = getMfaSetupConfirmApiV1AdminAuthMfaSetupConfirmPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Create New Role Endpoint
 */
export const createNewRoleEndpointApiV1AdminRolesPost = (
    roleCreate: RoleCreate,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<RoleResponse>(
      {url: `/api/v1/admin/roles/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleCreate, signal
    },
      options);
    }
  


export const getCreateNewRoleEndpointApiV1AdminRolesPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewRoleEndpointApiV1AdminRolesPost>>, TError,{data: RoleCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createNewRoleEndpointApiV1AdminRolesPost>>, TError,{data: RoleCreate}, TContext> => {

const mutationKey = ['createNewRoleEndpointApiV1AdminRolesPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createNewRoleEndpointApiV1AdminRolesPost>>, {data: RoleCreate}> = (props) => {
          const {data} = props ?? {};

          return  createNewRoleEndpointApiV1AdminRolesPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateNewRoleEndpointApiV1AdminRolesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createNewRoleEndpointApiV1AdminRolesPost>>>
    export type CreateNewRoleEndpointApiV1AdminRolesPostMutationBody = RoleCreate
    export type CreateNewRoleEndpointApiV1AdminRolesPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Create New Role Endpoint
 */
export const useCreateNewRoleEndpointApiV1AdminRolesPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewRoleEndpointApiV1AdminRolesPost>>, TError,{data: RoleCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createNewRoleEndpointApiV1AdminRolesPost>>,
        TError,
        {data: RoleCreate},
        TContext
      > => {

      const mutationOptions = getCreateNewRoleEndpointApiV1AdminRolesPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Read All Roles Endpoint
 */
export const readAllRolesEndpointApiV1AdminRolesGet = (
    params?: ReadAllRolesEndpointApiV1AdminRolesGetParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<RoleResponse[]>(
      {url: `/api/v1/admin/roles/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getReadAllRolesEndpointApiV1AdminRolesGetQueryKey = (params?: ReadAllRolesEndpointApiV1AdminRolesGetParams,) => {
    return [`/api/v1/admin/roles/`, ...(params ? [params]: [])] as const;
    }

    
export const getReadAllRolesEndpointApiV1AdminRolesGetQueryOptions = <TData = Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>, TError = ErrorType<HTTPValidationError>>(params?: ReadAllRolesEndpointApiV1AdminRolesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadAllRolesEndpointApiV1AdminRolesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>> = ({ signal }) => readAllRolesEndpointApiV1AdminRolesGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadAllRolesEndpointApiV1AdminRolesGetQueryResult = NonNullable<Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>>
export type ReadAllRolesEndpointApiV1AdminRolesGetQueryError = ErrorType<HTTPValidationError>


export function useReadAllRolesEndpointApiV1AdminRolesGet<TData = Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>, TError = ErrorType<HTTPValidationError>>(
 params: undefined |  ReadAllRolesEndpointApiV1AdminRolesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>,
          TError,
          Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllRolesEndpointApiV1AdminRolesGet<TData = Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllRolesEndpointApiV1AdminRolesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>,
          TError,
          Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllRolesEndpointApiV1AdminRolesGet<TData = Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllRolesEndpointApiV1AdminRolesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read All Roles Endpoint
 */

export function useReadAllRolesEndpointApiV1AdminRolesGet<TData = Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllRolesEndpointApiV1AdminRolesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllRolesEndpointApiV1AdminRolesGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadAllRolesEndpointApiV1AdminRolesGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Read Role By Id Endpoint
 */
export const readRoleByIdEndpointApiV1AdminRolesRoleIdGet = (
    roleId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<RoleResponse>(
      {url: `/api/v1/admin/roles/${roleId}`, method: 'GET', signal
    },
      options);
    }
  

export const getReadRoleByIdEndpointApiV1AdminRolesRoleIdGetQueryKey = (roleId: number,) => {
    return [`/api/v1/admin/roles/${roleId}`] as const;
    }

    
export const getReadRoleByIdEndpointApiV1AdminRolesRoleIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>, TError = ErrorType<HTTPValidationError>>(roleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadRoleByIdEndpointApiV1AdminRolesRoleIdGetQueryKey(roleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>> = ({ signal }) => readRoleByIdEndpointApiV1AdminRolesRoleIdGet(roleId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(roleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadRoleByIdEndpointApiV1AdminRolesRoleIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>>
export type ReadRoleByIdEndpointApiV1AdminRolesRoleIdGetQueryError = ErrorType<HTTPValidationError>


export function useReadRoleByIdEndpointApiV1AdminRolesRoleIdGet<TData = Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>, TError = ErrorType<HTTPValidationError>>(
 roleId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>,
          TError,
          Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadRoleByIdEndpointApiV1AdminRolesRoleIdGet<TData = Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>, TError = ErrorType<HTTPValidationError>>(
 roleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>,
          TError,
          Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadRoleByIdEndpointApiV1AdminRolesRoleIdGet<TData = Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>, TError = ErrorType<HTTPValidationError>>(
 roleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Role By Id Endpoint
 */

export function useReadRoleByIdEndpointApiV1AdminRolesRoleIdGet<TData = Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>, TError = ErrorType<HTTPValidationError>>(
 roleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRoleByIdEndpointApiV1AdminRolesRoleIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadRoleByIdEndpointApiV1AdminRolesRoleIdGetQueryOptions(roleId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update Existing Role Endpoint
 */
export const updateExistingRoleEndpointApiV1AdminRolesRoleIdPut = (
    roleId: number,
    roleUpdate: RoleUpdate,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<RoleResponse>(
      {url: `/api/v1/admin/roles/${roleId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: roleUpdate
    },
      options);
    }
  


export const getUpdateExistingRoleEndpointApiV1AdminRolesRoleIdPutMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateExistingRoleEndpointApiV1AdminRolesRoleIdPut>>, TError,{roleId: number;data: RoleUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateExistingRoleEndpointApiV1AdminRolesRoleIdPut>>, TError,{roleId: number;data: RoleUpdate}, TContext> => {

const mutationKey = ['updateExistingRoleEndpointApiV1AdminRolesRoleIdPut'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateExistingRoleEndpointApiV1AdminRolesRoleIdPut>>, {roleId: number;data: RoleUpdate}> = (props) => {
          const {roleId,data} = props ?? {};

          return  updateExistingRoleEndpointApiV1AdminRolesRoleIdPut(roleId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateExistingRoleEndpointApiV1AdminRolesRoleIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateExistingRoleEndpointApiV1AdminRolesRoleIdPut>>>
    export type UpdateExistingRoleEndpointApiV1AdminRolesRoleIdPutMutationBody = RoleUpdate
    export type UpdateExistingRoleEndpointApiV1AdminRolesRoleIdPutMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Update Existing Role Endpoint
 */
export const useUpdateExistingRoleEndpointApiV1AdminRolesRoleIdPut = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateExistingRoleEndpointApiV1AdminRolesRoleIdPut>>, TError,{roleId: number;data: RoleUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateExistingRoleEndpointApiV1AdminRolesRoleIdPut>>,
        TError,
        {roleId: number;data: RoleUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateExistingRoleEndpointApiV1AdminRolesRoleIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Delete Existing Role Endpoint
 */
export const deleteExistingRoleEndpointApiV1AdminRolesRoleIdDelete = (
    roleId: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<RoleResponse>(
      {url: `/api/v1/admin/roles/${roleId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteExistingRoleEndpointApiV1AdminRolesRoleIdDeleteMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteExistingRoleEndpointApiV1AdminRolesRoleIdDelete>>, TError,{roleId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteExistingRoleEndpointApiV1AdminRolesRoleIdDelete>>, TError,{roleId: number}, TContext> => {

const mutationKey = ['deleteExistingRoleEndpointApiV1AdminRolesRoleIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteExistingRoleEndpointApiV1AdminRolesRoleIdDelete>>, {roleId: number}> = (props) => {
          const {roleId} = props ?? {};

          return  deleteExistingRoleEndpointApiV1AdminRolesRoleIdDelete(roleId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteExistingRoleEndpointApiV1AdminRolesRoleIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteExistingRoleEndpointApiV1AdminRolesRoleIdDelete>>>
    
    export type DeleteExistingRoleEndpointApiV1AdminRolesRoleIdDeleteMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Delete Existing Role Endpoint
 */
export const useDeleteExistingRoleEndpointApiV1AdminRolesRoleIdDelete = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteExistingRoleEndpointApiV1AdminRolesRoleIdDelete>>, TError,{roleId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteExistingRoleEndpointApiV1AdminRolesRoleIdDelete>>,
        TError,
        {roleId: number},
        TContext
      > => {

      const mutationOptions = getDeleteExistingRoleEndpointApiV1AdminRolesRoleIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Crea un nuevo usuario administrador de tipo 'local' con contrase√±a.
- El username (DNI) y el email deben ser √∫nicos.
- Requiere rol de SuperAdmin.
 * @summary Create a new local Admin User
 */
export const createLocalAdminUserEndpointApiV1AdminAppUserManagementPost = (
    appUserLocalCreate: AppUserLocalCreate,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<AppUserResponse>(
      {url: `/api/v1/admin/app-user-management/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: appUserLocalCreate, signal
    },
      options);
    }
  


export const getCreateLocalAdminUserEndpointApiV1AdminAppUserManagementPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLocalAdminUserEndpointApiV1AdminAppUserManagementPost>>, TError,{data: AppUserLocalCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createLocalAdminUserEndpointApiV1AdminAppUserManagementPost>>, TError,{data: AppUserLocalCreate}, TContext> => {

const mutationKey = ['createLocalAdminUserEndpointApiV1AdminAppUserManagementPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createLocalAdminUserEndpointApiV1AdminAppUserManagementPost>>, {data: AppUserLocalCreate}> = (props) => {
          const {data} = props ?? {};

          return  createLocalAdminUserEndpointApiV1AdminAppUserManagementPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateLocalAdminUserEndpointApiV1AdminAppUserManagementPostMutationResult = NonNullable<Awaited<ReturnType<typeof createLocalAdminUserEndpointApiV1AdminAppUserManagementPost>>>
    export type CreateLocalAdminUserEndpointApiV1AdminAppUserManagementPostMutationBody = AppUserLocalCreate
    export type CreateLocalAdminUserEndpointApiV1AdminAppUserManagementPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Create a new local Admin User
 */
export const useCreateLocalAdminUserEndpointApiV1AdminAppUserManagementPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLocalAdminUserEndpointApiV1AdminAppUserManagementPost>>, TError,{data: AppUserLocalCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createLocalAdminUserEndpointApiV1AdminAppUserManagementPost>>,
        TError,
        {data: AppUserLocalCreate},
        TContext
      > => {

      const mutationOptions = getCreateLocalAdminUserEndpointApiV1AdminAppUserManagementPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Obtiene una lista de todos los usuarios administradores.
 * @summary List all Admin Users
 */
export const readAllAppUsersEndpointApiV1AdminAppUserManagementGet = (
    params?: ReadAllAppUsersEndpointApiV1AdminAppUserManagementGetParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<AppUserResponse[]>(
      {url: `/api/v1/admin/app-user-management/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getReadAllAppUsersEndpointApiV1AdminAppUserManagementGetQueryKey = (params?: ReadAllAppUsersEndpointApiV1AdminAppUserManagementGetParams,) => {
    return [`/api/v1/admin/app-user-management/`, ...(params ? [params]: [])] as const;
    }

    
export const getReadAllAppUsersEndpointApiV1AdminAppUserManagementGetQueryOptions = <TData = Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>, TError = ErrorType<HTTPValidationError>>(params?: ReadAllAppUsersEndpointApiV1AdminAppUserManagementGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadAllAppUsersEndpointApiV1AdminAppUserManagementGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>> = ({ signal }) => readAllAppUsersEndpointApiV1AdminAppUserManagementGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadAllAppUsersEndpointApiV1AdminAppUserManagementGetQueryResult = NonNullable<Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>>
export type ReadAllAppUsersEndpointApiV1AdminAppUserManagementGetQueryError = ErrorType<HTTPValidationError>


export function useReadAllAppUsersEndpointApiV1AdminAppUserManagementGet<TData = Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>, TError = ErrorType<HTTPValidationError>>(
 params: undefined |  ReadAllAppUsersEndpointApiV1AdminAppUserManagementGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>,
          TError,
          Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllAppUsersEndpointApiV1AdminAppUserManagementGet<TData = Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllAppUsersEndpointApiV1AdminAppUserManagementGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>,
          TError,
          Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllAppUsersEndpointApiV1AdminAppUserManagementGet<TData = Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllAppUsersEndpointApiV1AdminAppUserManagementGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List all Admin Users
 */

export function useReadAllAppUsersEndpointApiV1AdminAppUserManagementGet<TData = Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllAppUsersEndpointApiV1AdminAppUserManagementGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllAppUsersEndpointApiV1AdminAppUserManagementGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadAllAppUsersEndpointApiV1AdminAppUserManagementGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Obtiene los detalles de un usuario administrador espec√≠fico.
 * @summary Get Admin User by ID
 */
export const readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet = (
    appUserId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<AppUserResponse>(
      {url: `/api/v1/admin/app-user-management/${appUserId}`, method: 'GET', signal
    },
      options);
    }
  

export const getReadAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGetQueryKey = (appUserId: number,) => {
    return [`/api/v1/admin/app-user-management/${appUserId}`] as const;
    }

    
export const getReadAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>, TError = ErrorType<HTTPValidationError>>(appUserId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGetQueryKey(appUserId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>> = ({ signal }) => readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet(appUserId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(appUserId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>>
export type ReadAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGetQueryError = ErrorType<HTTPValidationError>


export function useReadAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet<TData = Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>, TError = ErrorType<HTTPValidationError>>(
 appUserId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet<TData = Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>, TError = ErrorType<HTTPValidationError>>(
 appUserId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet<TData = Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>, TError = ErrorType<HTTPValidationError>>(
 appUserId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Admin User by ID
 */

export function useReadAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet<TData = Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>, TError = ErrorType<HTTPValidationError>>(
 appUserId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadAppUserByIdEndpointApiV1AdminAppUserManagementAppUserIdGetQueryOptions(appUserId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Actualiza los detalles de un usuario administrador (email, nombre, estado, roles).
- Requiere rol de SuperAdmin.
- Nota: Este endpoint no cambia la contrase√±a.
 * @summary Update an Admin User
 */
export const updateAppUserEndpointApiV1AdminAppUserManagementAppUserIdPut = (
    appUserId: number,
    appUserUpdate: AppUserUpdate,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<AppUserResponse>(
      {url: `/api/v1/admin/app-user-management/${appUserId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: appUserUpdate
    },
      options);
    }
  


export const getUpdateAppUserEndpointApiV1AdminAppUserManagementAppUserIdPutMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAppUserEndpointApiV1AdminAppUserManagementAppUserIdPut>>, TError,{appUserId: number;data: AppUserUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateAppUserEndpointApiV1AdminAppUserManagementAppUserIdPut>>, TError,{appUserId: number;data: AppUserUpdate}, TContext> => {

const mutationKey = ['updateAppUserEndpointApiV1AdminAppUserManagementAppUserIdPut'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAppUserEndpointApiV1AdminAppUserManagementAppUserIdPut>>, {appUserId: number;data: AppUserUpdate}> = (props) => {
          const {appUserId,data} = props ?? {};

          return  updateAppUserEndpointApiV1AdminAppUserManagementAppUserIdPut(appUserId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAppUserEndpointApiV1AdminAppUserManagementAppUserIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateAppUserEndpointApiV1AdminAppUserManagementAppUserIdPut>>>
    export type UpdateAppUserEndpointApiV1AdminAppUserManagementAppUserIdPutMutationBody = AppUserUpdate
    export type UpdateAppUserEndpointApiV1AdminAppUserManagementAppUserIdPutMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Update an Admin User
 */
export const useUpdateAppUserEndpointApiV1AdminAppUserManagementAppUserIdPut = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAppUserEndpointApiV1AdminAppUserManagementAppUserIdPut>>, TError,{appUserId: number;data: AppUserUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateAppUserEndpointApiV1AdminAppUserManagementAppUserIdPut>>,
        TError,
        {appUserId: number;data: AppUserUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateAppUserEndpointApiV1AdminAppUserManagementAppUserIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Elimina PERMANENTEMENTE un usuario administrador del sistema.
- Requiere rol de SuperAdmin.
 * @summary Delete an Admin User
 */
export const deleteAppUserEndpointApiV1AdminAppUserManagementAppUserIdDelete = (
    appUserId: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/v1/admin/app-user-management/${appUserId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAppUserEndpointApiV1AdminAppUserManagementAppUserIdDeleteMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAppUserEndpointApiV1AdminAppUserManagementAppUserIdDelete>>, TError,{appUserId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAppUserEndpointApiV1AdminAppUserManagementAppUserIdDelete>>, TError,{appUserId: number}, TContext> => {

const mutationKey = ['deleteAppUserEndpointApiV1AdminAppUserManagementAppUserIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAppUserEndpointApiV1AdminAppUserManagementAppUserIdDelete>>, {appUserId: number}> = (props) => {
          const {appUserId} = props ?? {};

          return  deleteAppUserEndpointApiV1AdminAppUserManagementAppUserIdDelete(appUserId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAppUserEndpointApiV1AdminAppUserManagementAppUserIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAppUserEndpointApiV1AdminAppUserManagementAppUserIdDelete>>>
    
    export type DeleteAppUserEndpointApiV1AdminAppUserManagementAppUserIdDeleteMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Delete an Admin User
 */
export const useDeleteAppUserEndpointApiV1AdminAppUserManagementAppUserIdDelete = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAppUserEndpointApiV1AdminAppUserManagementAppUserIdDelete>>, TError,{appUserId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAppUserEndpointApiV1AdminAppUserManagementAppUserIdDelete>>,
        TError,
        {appUserId: number},
        TContext
      > => {

      const mutationOptions = getDeleteAppUserEndpointApiV1AdminAppUserManagementAppUserIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Solo SuperAdmin puede definir los men√∫s del sistema.
 * @summary Crear un nuevo item de men√∫
 */
export const createNewMenuItemApiV1AdminMenusPost = (
    adminPanelMenuCreate: AdminPanelMenuCreate,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<AdminPanelMenuResponse>(
      {url: `/api/v1/admin/menus/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: adminPanelMenuCreate, signal
    },
      options);
    }
  


export const getCreateNewMenuItemApiV1AdminMenusPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewMenuItemApiV1AdminMenusPost>>, TError,{data: AdminPanelMenuCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createNewMenuItemApiV1AdminMenusPost>>, TError,{data: AdminPanelMenuCreate}, TContext> => {

const mutationKey = ['createNewMenuItemApiV1AdminMenusPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createNewMenuItemApiV1AdminMenusPost>>, {data: AdminPanelMenuCreate}> = (props) => {
          const {data} = props ?? {};

          return  createNewMenuItemApiV1AdminMenusPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateNewMenuItemApiV1AdminMenusPostMutationResult = NonNullable<Awaited<ReturnType<typeof createNewMenuItemApiV1AdminMenusPost>>>
    export type CreateNewMenuItemApiV1AdminMenusPostMutationBody = AdminPanelMenuCreate
    export type CreateNewMenuItemApiV1AdminMenusPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Crear un nuevo item de men√∫
 */
export const useCreateNewMenuItemApiV1AdminMenusPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewMenuItemApiV1AdminMenusPost>>, TError,{data: AdminPanelMenuCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createNewMenuItemApiV1AdminMenusPost>>,
        TError,
        {data: AdminPanelMenuCreate},
        TContext
      > => {

      const mutationOptions = getCreateNewMenuItemApiV1AdminMenusPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Solo SuperAdmin puede listar todos los men√∫s configurables.
 * @summary Obtener todos los items de men√∫ definibles
 */
export const getAllMenuItemsApiV1AdminMenusGet = (
    params?: GetAllMenuItemsApiV1AdminMenusGetParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<AdminPanelMenuResponse[]>(
      {url: `/api/v1/admin/menus/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllMenuItemsApiV1AdminMenusGetQueryKey = (params?: GetAllMenuItemsApiV1AdminMenusGetParams,) => {
    return [`/api/v1/admin/menus/`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllMenuItemsApiV1AdminMenusGetQueryOptions = <TData = Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>, TError = ErrorType<HTTPValidationError>>(params?: GetAllMenuItemsApiV1AdminMenusGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllMenuItemsApiV1AdminMenusGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>> = ({ signal }) => getAllMenuItemsApiV1AdminMenusGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllMenuItemsApiV1AdminMenusGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>>
export type GetAllMenuItemsApiV1AdminMenusGetQueryError = ErrorType<HTTPValidationError>


export function useGetAllMenuItemsApiV1AdminMenusGet<TData = Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>, TError = ErrorType<HTTPValidationError>>(
 params: undefined |  GetAllMenuItemsApiV1AdminMenusGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>,
          TError,
          Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllMenuItemsApiV1AdminMenusGet<TData = Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: GetAllMenuItemsApiV1AdminMenusGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>,
          TError,
          Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllMenuItemsApiV1AdminMenusGet<TData = Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: GetAllMenuItemsApiV1AdminMenusGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener todos los items de men√∫ definibles
 */

export function useGetAllMenuItemsApiV1AdminMenusGet<TData = Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: GetAllMenuItemsApiV1AdminMenusGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMenuItemsApiV1AdminMenusGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllMenuItemsApiV1AdminMenusGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Actualizar un item de men√∫
 */
export const updateMenuItemApiV1AdminMenusMenuIdPut = (
    menuId: number,
    adminPanelMenuUpdate: AdminPanelMenuUpdate,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<AdminPanelMenuResponse>(
      {url: `/api/v1/admin/menus/${menuId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: adminPanelMenuUpdate
    },
      options);
    }
  


export const getUpdateMenuItemApiV1AdminMenusMenuIdPutMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMenuItemApiV1AdminMenusMenuIdPut>>, TError,{menuId: number;data: AdminPanelMenuUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateMenuItemApiV1AdminMenusMenuIdPut>>, TError,{menuId: number;data: AdminPanelMenuUpdate}, TContext> => {

const mutationKey = ['updateMenuItemApiV1AdminMenusMenuIdPut'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMenuItemApiV1AdminMenusMenuIdPut>>, {menuId: number;data: AdminPanelMenuUpdate}> = (props) => {
          const {menuId,data} = props ?? {};

          return  updateMenuItemApiV1AdminMenusMenuIdPut(menuId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMenuItemApiV1AdminMenusMenuIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateMenuItemApiV1AdminMenusMenuIdPut>>>
    export type UpdateMenuItemApiV1AdminMenusMenuIdPutMutationBody = AdminPanelMenuUpdate
    export type UpdateMenuItemApiV1AdminMenusMenuIdPutMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Actualizar un item de men√∫
 */
export const useUpdateMenuItemApiV1AdminMenusMenuIdPut = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMenuItemApiV1AdminMenusMenuIdPut>>, TError,{menuId: number;data: AdminPanelMenuUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateMenuItemApiV1AdminMenusMenuIdPut>>,
        TError,
        {menuId: number;data: AdminPanelMenuUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateMenuItemApiV1AdminMenusMenuIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Eliminar un item de men√∫
 */
export const deleteMenuItemApiV1AdminMenusMenuIdDelete = (
    menuId: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/v1/admin/menus/${menuId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMenuItemApiV1AdminMenusMenuIdDeleteMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMenuItemApiV1AdminMenusMenuIdDelete>>, TError,{menuId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMenuItemApiV1AdminMenusMenuIdDelete>>, TError,{menuId: number}, TContext> => {

const mutationKey = ['deleteMenuItemApiV1AdminMenusMenuIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMenuItemApiV1AdminMenusMenuIdDelete>>, {menuId: number}> = (props) => {
          const {menuId} = props ?? {};

          return  deleteMenuItemApiV1AdminMenusMenuIdDelete(menuId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMenuItemApiV1AdminMenusMenuIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMenuItemApiV1AdminMenusMenuIdDelete>>>
    
    export type DeleteMenuItemApiV1AdminMenusMenuIdDeleteMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Eliminar un item de men√∫
 */
export const useDeleteMenuItemApiV1AdminMenusMenuIdDelete = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMenuItemApiV1AdminMenusMenuIdDelete>>, TError,{menuId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteMenuItemApiV1AdminMenusMenuIdDelete>>,
        TError,
        {menuId: number},
        TContext
      > => {

      const mutationOptions = getDeleteMenuItemApiV1AdminMenusMenuIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Obtener men√∫s asignados a un rol
 */
export const getMenusForRoleApiV1AdminRolesRoleIdMenusGet = (
    roleId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<AdminPanelMenuResponse[]>(
      {url: `/api/v1/admin/roles/${roleId}/menus/`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMenusForRoleApiV1AdminRolesRoleIdMenusGetQueryKey = (roleId: number,) => {
    return [`/api/v1/admin/roles/${roleId}/menus/`] as const;
    }

    
export const getGetMenusForRoleApiV1AdminRolesRoleIdMenusGetQueryOptions = <TData = Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>, TError = ErrorType<HTTPValidationError>>(roleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMenusForRoleApiV1AdminRolesRoleIdMenusGetQueryKey(roleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>> = ({ signal }) => getMenusForRoleApiV1AdminRolesRoleIdMenusGet(roleId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(roleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMenusForRoleApiV1AdminRolesRoleIdMenusGetQueryResult = NonNullable<Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>>
export type GetMenusForRoleApiV1AdminRolesRoleIdMenusGetQueryError = ErrorType<HTTPValidationError>


export function useGetMenusForRoleApiV1AdminRolesRoleIdMenusGet<TData = Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>, TError = ErrorType<HTTPValidationError>>(
 roleId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>,
          TError,
          Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMenusForRoleApiV1AdminRolesRoleIdMenusGet<TData = Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>, TError = ErrorType<HTTPValidationError>>(
 roleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>,
          TError,
          Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMenusForRoleApiV1AdminRolesRoleIdMenusGet<TData = Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>, TError = ErrorType<HTTPValidationError>>(
 roleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener men√∫s asignados a un rol
 */

export function useGetMenusForRoleApiV1AdminRolesRoleIdMenusGet<TData = Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>, TError = ErrorType<HTTPValidationError>>(
 roleId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMenusForRoleApiV1AdminRolesRoleIdMenusGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMenusForRoleApiV1AdminRolesRoleIdMenusGetQueryOptions(roleId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Asignar un men√∫ a un rol
 */
export const assignMenuPermissionToRoleApiV1AdminRolesRoleIdMenusPost = (
    roleId: number,
    adminRoleMenuPermissionCreate: AdminRoleMenuPermissionCreate,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<AdminRoleMenuPermissionResponse>(
      {url: `/api/v1/admin/roles/${roleId}/menus/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: adminRoleMenuPermissionCreate, signal
    },
      options);
    }
  


export const getAssignMenuPermissionToRoleApiV1AdminRolesRoleIdMenusPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof assignMenuPermissionToRoleApiV1AdminRolesRoleIdMenusPost>>, TError,{roleId: number;data: AdminRoleMenuPermissionCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof assignMenuPermissionToRoleApiV1AdminRolesRoleIdMenusPost>>, TError,{roleId: number;data: AdminRoleMenuPermissionCreate}, TContext> => {

const mutationKey = ['assignMenuPermissionToRoleApiV1AdminRolesRoleIdMenusPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof assignMenuPermissionToRoleApiV1AdminRolesRoleIdMenusPost>>, {roleId: number;data: AdminRoleMenuPermissionCreate}> = (props) => {
          const {roleId,data} = props ?? {};

          return  assignMenuPermissionToRoleApiV1AdminRolesRoleIdMenusPost(roleId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AssignMenuPermissionToRoleApiV1AdminRolesRoleIdMenusPostMutationResult = NonNullable<Awaited<ReturnType<typeof assignMenuPermissionToRoleApiV1AdminRolesRoleIdMenusPost>>>
    export type AssignMenuPermissionToRoleApiV1AdminRolesRoleIdMenusPostMutationBody = AdminRoleMenuPermissionCreate
    export type AssignMenuPermissionToRoleApiV1AdminRolesRoleIdMenusPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Asignar un men√∫ a un rol
 */
export const useAssignMenuPermissionToRoleApiV1AdminRolesRoleIdMenusPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof assignMenuPermissionToRoleApiV1AdminRolesRoleIdMenusPost>>, TError,{roleId: number;data: AdminRoleMenuPermissionCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof assignMenuPermissionToRoleApiV1AdminRolesRoleIdMenusPost>>,
        TError,
        {roleId: number;data: AdminRoleMenuPermissionCreate},
        TContext
      > => {

      const mutationOptions = getAssignMenuPermissionToRoleApiV1AdminRolesRoleIdMenusPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Quitar permiso de un men√∫ a un rol
 */
export const removeMenuPermissionFromRoleApiV1AdminRolesRoleIdMenusMenuIdDelete = (
    roleId: number,
    menuId: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/v1/admin/roles/${roleId}/menus/${menuId}`, method: 'DELETE'
    },
      options);
    }
  


export const getRemoveMenuPermissionFromRoleApiV1AdminRolesRoleIdMenusMenuIdDeleteMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeMenuPermissionFromRoleApiV1AdminRolesRoleIdMenusMenuIdDelete>>, TError,{roleId: number;menuId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof removeMenuPermissionFromRoleApiV1AdminRolesRoleIdMenusMenuIdDelete>>, TError,{roleId: number;menuId: number}, TContext> => {

const mutationKey = ['removeMenuPermissionFromRoleApiV1AdminRolesRoleIdMenusMenuIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeMenuPermissionFromRoleApiV1AdminRolesRoleIdMenusMenuIdDelete>>, {roleId: number;menuId: number}> = (props) => {
          const {roleId,menuId} = props ?? {};

          return  removeMenuPermissionFromRoleApiV1AdminRolesRoleIdMenusMenuIdDelete(roleId,menuId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveMenuPermissionFromRoleApiV1AdminRolesRoleIdMenusMenuIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof removeMenuPermissionFromRoleApiV1AdminRolesRoleIdMenusMenuIdDelete>>>
    
    export type RemoveMenuPermissionFromRoleApiV1AdminRolesRoleIdMenusMenuIdDeleteMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Quitar permiso de un men√∫ a un rol
 */
export const useRemoveMenuPermissionFromRoleApiV1AdminRolesRoleIdMenusMenuIdDelete = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeMenuPermissionFromRoleApiV1AdminRolesRoleIdMenusMenuIdDelete>>, TError,{roleId: number;menuId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof removeMenuPermissionFromRoleApiV1AdminRolesRoleIdMenusMenuIdDelete>>,
        TError,
        {roleId: number;menuId: number},
        TContext
      > => {

      const mutationOptions = getRemoveMenuPermissionFromRoleApiV1AdminRolesRoleIdMenusMenuIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Endpoint principal para el frontend. Tras el login, se llama a esta ruta
para obtener la lista de men√∫s que el panel de administraci√≥n debe renderizar
para el usuario actual.
 * @summary Obtener los men√∫s autorizados para el usuario logueado
 */
export const getMyAuthorizedMenusApiV1AdminMeMenusGet = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<AuthorizedMenuResponse[]>(
      {url: `/api/v1/admin/me/menus`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMyAuthorizedMenusApiV1AdminMeMenusGetQueryKey = () => {
    return [`/api/v1/admin/me/menus`] as const;
    }

    
export const getGetMyAuthorizedMenusApiV1AdminMeMenusGetQueryOptions = <TData = Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyAuthorizedMenusApiV1AdminMeMenusGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>> = ({ signal }) => getMyAuthorizedMenusApiV1AdminMeMenusGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMyAuthorizedMenusApiV1AdminMeMenusGetQueryResult = NonNullable<Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>>
export type GetMyAuthorizedMenusApiV1AdminMeMenusGetQueryError = ErrorType<unknown>


export function useGetMyAuthorizedMenusApiV1AdminMeMenusGet<TData = Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>,
          TError,
          Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMyAuthorizedMenusApiV1AdminMeMenusGet<TData = Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>,
          TError,
          Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMyAuthorizedMenusApiV1AdminMeMenusGet<TData = Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener los men√∫s autorizados para el usuario logueado
 */

export function useGetMyAuthorizedMenusApiV1AdminMeMenusGet<TData = Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMyAuthorizedMenusApiV1AdminMeMenusGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMyAuthorizedMenusApiV1AdminMeMenusGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Crea un nuevo cliente API y genera una API Key √∫nica para √©l.
La API Key generada (api_key_plain) ser√° parte de la respuesta y DEBE ser copiada.
El objeto `settings` debe adherirse a `ApiClientSettingsSchema`.
 * @summary Create New API Client
 */
export const createNewApiClient = (
    apiClientCreate: ApiClientCreate,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiClientWithPlainKeyResponse>(
      {url: `/api/v1/admin/api_clients/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: apiClientCreate, signal
    },
      options);
    }
  


export const getCreateNewApiClientMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewApiClient>>, TError,{data: ApiClientCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createNewApiClient>>, TError,{data: ApiClientCreate}, TContext> => {

const mutationKey = ['createNewApiClient'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createNewApiClient>>, {data: ApiClientCreate}> = (props) => {
          const {data} = props ?? {};

          return  createNewApiClient(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateNewApiClientMutationResult = NonNullable<Awaited<ReturnType<typeof createNewApiClient>>>
    export type CreateNewApiClientMutationBody = ApiClientCreate
    export type CreateNewApiClientMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Create New API Client
 */
export const useCreateNewApiClient = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewApiClient>>, TError,{data: ApiClientCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createNewApiClient>>,
        TError,
        {data: ApiClientCreate},
        TContext
      > => {

      const mutationOptions = getCreateNewApiClientMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Obtiene una lista de clientes API (paginada).
No se muestra `api_key_plain`. Se incluyen `allowed_contexts_details`.
 * @summary Read All API Clients
 */
export const readAllApiClients = (
    params?: ReadAllApiClientsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiClientResponse[]>(
      {url: `/api/v1/admin/api_clients/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getReadAllApiClientsQueryKey = (params?: ReadAllApiClientsParams,) => {
    return [`/api/v1/admin/api_clients/`, ...(params ? [params]: [])] as const;
    }

    
export const getReadAllApiClientsQueryOptions = <TData = Awaited<ReturnType<typeof readAllApiClients>>, TError = ErrorType<HTTPValidationError>>(params?: ReadAllApiClientsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllApiClients>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadAllApiClientsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAllApiClients>>> = ({ signal }) => readAllApiClients(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readAllApiClients>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadAllApiClientsQueryResult = NonNullable<Awaited<ReturnType<typeof readAllApiClients>>>
export type ReadAllApiClientsQueryError = ErrorType<HTTPValidationError>


export function useReadAllApiClients<TData = Awaited<ReturnType<typeof readAllApiClients>>, TError = ErrorType<HTTPValidationError>>(
 params: undefined |  ReadAllApiClientsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllApiClients>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllApiClients>>,
          TError,
          Awaited<ReturnType<typeof readAllApiClients>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllApiClients<TData = Awaited<ReturnType<typeof readAllApiClients>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllApiClientsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllApiClients>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllApiClients>>,
          TError,
          Awaited<ReturnType<typeof readAllApiClients>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllApiClients<TData = Awaited<ReturnType<typeof readAllApiClients>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllApiClientsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllApiClients>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read All API Clients
 */

export function useReadAllApiClients<TData = Awaited<ReturnType<typeof readAllApiClients>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllApiClientsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllApiClients>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadAllApiClientsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Obtiene un cliente API por su ID.
No se muestra `api_key_plain`. Se incluyen `allowed_contexts_details`.
 * @summary Read API Client by ID
 */
export const readApiClientById = (
    apiClientId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiClientResponse>(
      {url: `/api/v1/admin/api_clients/${apiClientId}`, method: 'GET', signal
    },
      options);
    }
  

export const getReadApiClientByIdQueryKey = (apiClientId: number,) => {
    return [`/api/v1/admin/api_clients/${apiClientId}`] as const;
    }

    
export const getReadApiClientByIdQueryOptions = <TData = Awaited<ReturnType<typeof readApiClientById>>, TError = ErrorType<HTTPValidationError>>(apiClientId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readApiClientById>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadApiClientByIdQueryKey(apiClientId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readApiClientById>>> = ({ signal }) => readApiClientById(apiClientId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(apiClientId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readApiClientById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadApiClientByIdQueryResult = NonNullable<Awaited<ReturnType<typeof readApiClientById>>>
export type ReadApiClientByIdQueryError = ErrorType<HTTPValidationError>


export function useReadApiClientById<TData = Awaited<ReturnType<typeof readApiClientById>>, TError = ErrorType<HTTPValidationError>>(
 apiClientId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readApiClientById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readApiClientById>>,
          TError,
          Awaited<ReturnType<typeof readApiClientById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadApiClientById<TData = Awaited<ReturnType<typeof readApiClientById>>, TError = ErrorType<HTTPValidationError>>(
 apiClientId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readApiClientById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readApiClientById>>,
          TError,
          Awaited<ReturnType<typeof readApiClientById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadApiClientById<TData = Awaited<ReturnType<typeof readApiClientById>>, TError = ErrorType<HTTPValidationError>>(
 apiClientId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readApiClientById>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read API Client by ID
 */

export function useReadApiClientById<TData = Awaited<ReturnType<typeof readApiClientById>>, TError = ErrorType<HTTPValidationError>>(
 apiClientId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readApiClientById>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadApiClientByIdQueryOptions(apiClientId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Actualiza un cliente API existente. No regenera la API Key.
El objeto `settings` (si se env√≠a) debe adherirse a `ApiClientSettingsSchema`.
 * @summary Update Existing API Client
 */
export const updateApiClientById = (
    apiClientId: number,
    apiClientUpdate: ApiClientUpdate,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<ApiClientResponse>(
      {url: `/api/v1/admin/api_clients/${apiClientId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: apiClientUpdate
    },
      options);
    }
  


export const getUpdateApiClientByIdMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateApiClientById>>, TError,{apiClientId: number;data: ApiClientUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateApiClientById>>, TError,{apiClientId: number;data: ApiClientUpdate}, TContext> => {

const mutationKey = ['updateApiClientById'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateApiClientById>>, {apiClientId: number;data: ApiClientUpdate}> = (props) => {
          const {apiClientId,data} = props ?? {};

          return  updateApiClientById(apiClientId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateApiClientByIdMutationResult = NonNullable<Awaited<ReturnType<typeof updateApiClientById>>>
    export type UpdateApiClientByIdMutationBody = ApiClientUpdate
    export type UpdateApiClientByIdMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Update Existing API Client
 */
export const useUpdateApiClientById = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateApiClientById>>, TError,{apiClientId: number;data: ApiClientUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateApiClientById>>,
        TError,
        {apiClientId: number;data: ApiClientUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateApiClientByIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Elimina un cliente API.
 * @summary Delete API Client
 */
export const deleteApiClientById = (
    apiClientId: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/v1/admin/api_clients/${apiClientId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiClientByIdMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiClientById>>, TError,{apiClientId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiClientById>>, TError,{apiClientId: number}, TContext> => {

const mutationKey = ['deleteApiClientById'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiClientById>>, {apiClientId: number}> = (props) => {
          const {apiClientId} = props ?? {};

          return  deleteApiClientById(apiClientId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiClientByIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiClientById>>>
    
    export type DeleteApiClientByIdMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Delete API Client
 */
export const useDeleteApiClientById = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiClientById>>, TError,{apiClientId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiClientById>>,
        TError,
        {apiClientId: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiClientByIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Genera una nueva API Key para un cliente existente y la devuelve (una vez).
La clave antigua se invalida.
 * @summary Regenerate API Key
 */
export const regenerateApiKeyForClient = (
    apiClientId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiClientWithPlainKeyResponse>(
      {url: `/api/v1/admin/api_clients/${apiClientId}/regenerate_key`, method: 'POST', signal
    },
      options);
    }
  


export const getRegenerateApiKeyForClientMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof regenerateApiKeyForClient>>, TError,{apiClientId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof regenerateApiKeyForClient>>, TError,{apiClientId: number}, TContext> => {

const mutationKey = ['regenerateApiKeyForClient'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof regenerateApiKeyForClient>>, {apiClientId: number}> = (props) => {
          const {apiClientId} = props ?? {};

          return  regenerateApiKeyForClient(apiClientId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegenerateApiKeyForClientMutationResult = NonNullable<Awaited<ReturnType<typeof regenerateApiKeyForClient>>>
    
    export type RegenerateApiKeyForClientMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Regenerate API Key
 */
export const useRegenerateApiKeyForClient = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof regenerateApiKeyForClient>>, TError,{apiClientId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof regenerateApiKeyForClient>>,
        TError,
        {apiClientId: number},
        TContext
      > => {

      const mutationOptions = getRegenerateApiKeyForClientMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Create New Context Definition
 */
export const createNewContextDefinitionEndpointApiV1AdminContextDefinitionsPost = (
    contextDefinitionCreate: ContextDefinitionCreate,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ContextDefinitionResponse>(
      {url: `/api/v1/admin/context-definitions/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: contextDefinitionCreate, signal
    },
      options);
    }
  


export const getCreateNewContextDefinitionEndpointApiV1AdminContextDefinitionsPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewContextDefinitionEndpointApiV1AdminContextDefinitionsPost>>, TError,{data: ContextDefinitionCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createNewContextDefinitionEndpointApiV1AdminContextDefinitionsPost>>, TError,{data: ContextDefinitionCreate}, TContext> => {

const mutationKey = ['createNewContextDefinitionEndpointApiV1AdminContextDefinitionsPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createNewContextDefinitionEndpointApiV1AdminContextDefinitionsPost>>, {data: ContextDefinitionCreate}> = (props) => {
          const {data} = props ?? {};

          return  createNewContextDefinitionEndpointApiV1AdminContextDefinitionsPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateNewContextDefinitionEndpointApiV1AdminContextDefinitionsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createNewContextDefinitionEndpointApiV1AdminContextDefinitionsPost>>>
    export type CreateNewContextDefinitionEndpointApiV1AdminContextDefinitionsPostMutationBody = ContextDefinitionCreate
    export type CreateNewContextDefinitionEndpointApiV1AdminContextDefinitionsPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Create New Context Definition
 */
export const useCreateNewContextDefinitionEndpointApiV1AdminContextDefinitionsPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewContextDefinitionEndpointApiV1AdminContextDefinitionsPost>>, TError,{data: ContextDefinitionCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createNewContextDefinitionEndpointApiV1AdminContextDefinitionsPost>>,
        TError,
        {data: ContextDefinitionCreate},
        TContext
      > => {

      const mutationOptions = getCreateNewContextDefinitionEndpointApiV1AdminContextDefinitionsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Read All Context Definitions
 */
export const readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet = (
    params?: ReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGetParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ContextDefinitionResponse[]>(
      {url: `/api/v1/admin/context-definitions/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGetQueryKey = (params?: ReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGetParams,) => {
    return [`/api/v1/admin/context-definitions/`, ...(params ? [params]: [])] as const;
    }

    
export const getReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGetQueryOptions = <TData = Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>, TError = ErrorType<HTTPValidationError>>(params?: ReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>> = ({ signal }) => readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>>
export type ReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGetQueryError = ErrorType<HTTPValidationError>


export function useReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet<TData = Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>, TError = ErrorType<HTTPValidationError>>(
 params: undefined |  ReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>,
          TError,
          Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet<TData = Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>,
          TError,
          Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet<TData = Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read All Context Definitions
 */

export function useReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet<TData = Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadAllContextDefinitionsEndpointApiV1AdminContextDefinitionsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Read Context Definition by ID
 */
export const readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet = (
    contextId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ContextDefinitionResponse>(
      {url: `/api/v1/admin/context-definitions/${contextId}`, method: 'GET', signal
    },
      options);
    }
  

export const getReadContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGetQueryKey = (contextId: number,) => {
    return [`/api/v1/admin/context-definitions/${contextId}`] as const;
    }

    
export const getReadContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>, TError = ErrorType<HTTPValidationError>>(contextId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGetQueryKey(contextId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>> = ({ signal }) => readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet(contextId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(contextId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>>
export type ReadContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGetQueryError = ErrorType<HTTPValidationError>


export function useReadContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet<TData = Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>, TError = ErrorType<HTTPValidationError>>(
 contextId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>,
          TError,
          Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet<TData = Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>, TError = ErrorType<HTTPValidationError>>(
 contextId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>,
          TError,
          Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet<TData = Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>, TError = ErrorType<HTTPValidationError>>(
 contextId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Context Definition by ID
 */

export function useReadContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet<TData = Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>, TError = ErrorType<HTTPValidationError>>(
 contextId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadContextDefinitionByIdEndpointApiV1AdminContextDefinitionsContextIdGetQueryOptions(contextId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update Existing Context Definition
 */
export const updateExistingContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdPut = (
    contextId: number,
    contextDefinitionUpdate: ContextDefinitionUpdate,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<ContextDefinitionResponse>(
      {url: `/api/v1/admin/context-definitions/${contextId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: contextDefinitionUpdate
    },
      options);
    }
  


export const getUpdateExistingContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdPutMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateExistingContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdPut>>, TError,{contextId: number;data: ContextDefinitionUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateExistingContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdPut>>, TError,{contextId: number;data: ContextDefinitionUpdate}, TContext> => {

const mutationKey = ['updateExistingContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdPut'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateExistingContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdPut>>, {contextId: number;data: ContextDefinitionUpdate}> = (props) => {
          const {contextId,data} = props ?? {};

          return  updateExistingContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdPut(contextId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateExistingContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateExistingContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdPut>>>
    export type UpdateExistingContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdPutMutationBody = ContextDefinitionUpdate
    export type UpdateExistingContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdPutMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Update Existing Context Definition
 */
export const useUpdateExistingContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdPut = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateExistingContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdPut>>, TError,{contextId: number;data: ContextDefinitionUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateExistingContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdPut>>,
        TError,
        {contextId: number;data: ContextDefinitionUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateExistingContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Delete Context Definition
 */
export const deleteContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdDelete = (
    contextId: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/v1/admin/context-definitions/${contextId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdDeleteMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdDelete>>, TError,{contextId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdDelete>>, TError,{contextId: number}, TContext> => {

const mutationKey = ['deleteContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdDelete>>, {contextId: number}> = (props) => {
          const {contextId} = props ?? {};

          return  deleteContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdDelete(contextId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdDelete>>>
    
    export type DeleteContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdDeleteMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Delete Context Definition
 */
export const useDeleteContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdDelete = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdDelete>>, TError,{contextId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdDelete>>,
        TError,
        {contextId: number},
        TContext
      > => {

      const mutationOptions = getDeleteContextDefinitionEndpointApiV1AdminContextDefinitionsContextIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Create New Document Source
 */
export const createNewDocumentSourceApiV1AdminDocSourcesPost = (
    documentSourceCreate: DocumentSourceCreate,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DocumentSourceResponse>(
      {url: `/api/v1/admin/doc_sources/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: documentSourceCreate, signal
    },
      options);
    }
  


export const getCreateNewDocumentSourceApiV1AdminDocSourcesPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewDocumentSourceApiV1AdminDocSourcesPost>>, TError,{data: DocumentSourceCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createNewDocumentSourceApiV1AdminDocSourcesPost>>, TError,{data: DocumentSourceCreate}, TContext> => {

const mutationKey = ['createNewDocumentSourceApiV1AdminDocSourcesPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createNewDocumentSourceApiV1AdminDocSourcesPost>>, {data: DocumentSourceCreate}> = (props) => {
          const {data} = props ?? {};

          return  createNewDocumentSourceApiV1AdminDocSourcesPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateNewDocumentSourceApiV1AdminDocSourcesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createNewDocumentSourceApiV1AdminDocSourcesPost>>>
    export type CreateNewDocumentSourceApiV1AdminDocSourcesPostMutationBody = DocumentSourceCreate
    export type CreateNewDocumentSourceApiV1AdminDocSourcesPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Create New Document Source
 */
export const useCreateNewDocumentSourceApiV1AdminDocSourcesPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewDocumentSourceApiV1AdminDocSourcesPost>>, TError,{data: DocumentSourceCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createNewDocumentSourceApiV1AdminDocSourcesPost>>,
        TError,
        {data: DocumentSourceCreate},
        TContext
      > => {

      const mutationOptions = getCreateNewDocumentSourceApiV1AdminDocSourcesPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Read All Document Sources
 */
export const readAllDocumentSourcesApiV1AdminDocSourcesGet = (
    params?: ReadAllDocumentSourcesApiV1AdminDocSourcesGetParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DocumentSourceResponse[]>(
      {url: `/api/v1/admin/doc_sources/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getReadAllDocumentSourcesApiV1AdminDocSourcesGetQueryKey = (params?: ReadAllDocumentSourcesApiV1AdminDocSourcesGetParams,) => {
    return [`/api/v1/admin/doc_sources/`, ...(params ? [params]: [])] as const;
    }

    
export const getReadAllDocumentSourcesApiV1AdminDocSourcesGetQueryOptions = <TData = Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>, TError = ErrorType<HTTPValidationError>>(params?: ReadAllDocumentSourcesApiV1AdminDocSourcesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadAllDocumentSourcesApiV1AdminDocSourcesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>> = ({ signal }) => readAllDocumentSourcesApiV1AdminDocSourcesGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadAllDocumentSourcesApiV1AdminDocSourcesGetQueryResult = NonNullable<Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>>
export type ReadAllDocumentSourcesApiV1AdminDocSourcesGetQueryError = ErrorType<HTTPValidationError>


export function useReadAllDocumentSourcesApiV1AdminDocSourcesGet<TData = Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>, TError = ErrorType<HTTPValidationError>>(
 params: undefined |  ReadAllDocumentSourcesApiV1AdminDocSourcesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>,
          TError,
          Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllDocumentSourcesApiV1AdminDocSourcesGet<TData = Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllDocumentSourcesApiV1AdminDocSourcesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>,
          TError,
          Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllDocumentSourcesApiV1AdminDocSourcesGet<TData = Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllDocumentSourcesApiV1AdminDocSourcesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read All Document Sources
 */

export function useReadAllDocumentSourcesApiV1AdminDocSourcesGet<TData = Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllDocumentSourcesApiV1AdminDocSourcesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllDocumentSourcesApiV1AdminDocSourcesGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadAllDocumentSourcesApiV1AdminDocSourcesGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Read Document Source By Id
 */
export const readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet = (
    sourceId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DocumentSourceResponse>(
      {url: `/api/v1/admin/doc_sources/${sourceId}`, method: 'GET', signal
    },
      options);
    }
  

export const getReadDocumentSourceByIdApiV1AdminDocSourcesSourceIdGetQueryKey = (sourceId: number,) => {
    return [`/api/v1/admin/doc_sources/${sourceId}`] as const;
    }

    
export const getReadDocumentSourceByIdApiV1AdminDocSourcesSourceIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>, TError = ErrorType<HTTPValidationError>>(sourceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadDocumentSourceByIdApiV1AdminDocSourcesSourceIdGetQueryKey(sourceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>> = ({ signal }) => readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet(sourceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(sourceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadDocumentSourceByIdApiV1AdminDocSourcesSourceIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>>
export type ReadDocumentSourceByIdApiV1AdminDocSourcesSourceIdGetQueryError = ErrorType<HTTPValidationError>


export function useReadDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet<TData = Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>, TError = ErrorType<HTTPValidationError>>(
 sourceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>,
          TError,
          Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet<TData = Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>, TError = ErrorType<HTTPValidationError>>(
 sourceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>,
          TError,
          Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet<TData = Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>, TError = ErrorType<HTTPValidationError>>(
 sourceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Document Source By Id
 */

export function useReadDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet<TData = Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>, TError = ErrorType<HTTPValidationError>>(
 sourceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readDocumentSourceByIdApiV1AdminDocSourcesSourceIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadDocumentSourceByIdApiV1AdminDocSourcesSourceIdGetQueryOptions(sourceId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update Existing Document Source
 */
export const updateExistingDocumentSourceApiV1AdminDocSourcesSourceIdPut = (
    sourceId: number,
    documentSourceUpdate: DocumentSourceUpdate,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<DocumentSourceResponse>(
      {url: `/api/v1/admin/doc_sources/${sourceId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: documentSourceUpdate
    },
      options);
    }
  


export const getUpdateExistingDocumentSourceApiV1AdminDocSourcesSourceIdPutMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateExistingDocumentSourceApiV1AdminDocSourcesSourceIdPut>>, TError,{sourceId: number;data: DocumentSourceUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateExistingDocumentSourceApiV1AdminDocSourcesSourceIdPut>>, TError,{sourceId: number;data: DocumentSourceUpdate}, TContext> => {

const mutationKey = ['updateExistingDocumentSourceApiV1AdminDocSourcesSourceIdPut'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateExistingDocumentSourceApiV1AdminDocSourcesSourceIdPut>>, {sourceId: number;data: DocumentSourceUpdate}> = (props) => {
          const {sourceId,data} = props ?? {};

          return  updateExistingDocumentSourceApiV1AdminDocSourcesSourceIdPut(sourceId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateExistingDocumentSourceApiV1AdminDocSourcesSourceIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateExistingDocumentSourceApiV1AdminDocSourcesSourceIdPut>>>
    export type UpdateExistingDocumentSourceApiV1AdminDocSourcesSourceIdPutMutationBody = DocumentSourceUpdate
    export type UpdateExistingDocumentSourceApiV1AdminDocSourcesSourceIdPutMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Update Existing Document Source
 */
export const useUpdateExistingDocumentSourceApiV1AdminDocSourcesSourceIdPut = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateExistingDocumentSourceApiV1AdminDocSourcesSourceIdPut>>, TError,{sourceId: number;data: DocumentSourceUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateExistingDocumentSourceApiV1AdminDocSourcesSourceIdPut>>,
        TError,
        {sourceId: number;data: DocumentSourceUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateExistingDocumentSourceApiV1AdminDocSourcesSourceIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Delete Document Source Entry
 */
export const deleteDocumentSourceEntryApiV1AdminDocSourcesSourceIdDelete = (
    sourceId: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/v1/admin/doc_sources/${sourceId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDocumentSourceEntryApiV1AdminDocSourcesSourceIdDeleteMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDocumentSourceEntryApiV1AdminDocSourcesSourceIdDelete>>, TError,{sourceId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDocumentSourceEntryApiV1AdminDocSourcesSourceIdDelete>>, TError,{sourceId: number}, TContext> => {

const mutationKey = ['deleteDocumentSourceEntryApiV1AdminDocSourcesSourceIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDocumentSourceEntryApiV1AdminDocSourcesSourceIdDelete>>, {sourceId: number}> = (props) => {
          const {sourceId} = props ?? {};

          return  deleteDocumentSourceEntryApiV1AdminDocSourcesSourceIdDelete(sourceId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDocumentSourceEntryApiV1AdminDocSourcesSourceIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDocumentSourceEntryApiV1AdminDocSourcesSourceIdDelete>>>
    
    export type DeleteDocumentSourceEntryApiV1AdminDocSourcesSourceIdDeleteMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Delete Document Source Entry
 */
export const useDeleteDocumentSourceEntryApiV1AdminDocSourcesSourceIdDelete = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDocumentSourceEntryApiV1AdminDocSourcesSourceIdDelete>>, TError,{sourceId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteDocumentSourceEntryApiV1AdminDocSourcesSourceIdDelete>>,
        TError,
        {sourceId: number},
        TContext
      > => {

      const mutationOptions = getDeleteDocumentSourceEntryApiV1AdminDocSourcesSourceIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Create New Db Connection
 */
export const createNewDbConnectionApiV1AdminDbConnectionsPost = (
    databaseConnectionCreate: DatabaseConnectionCreate,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DatabaseConnectionResponse>(
      {url: `/api/v1/admin/db_connections/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: databaseConnectionCreate, signal
    },
      options);
    }
  


export const getCreateNewDbConnectionApiV1AdminDbConnectionsPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewDbConnectionApiV1AdminDbConnectionsPost>>, TError,{data: DatabaseConnectionCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createNewDbConnectionApiV1AdminDbConnectionsPost>>, TError,{data: DatabaseConnectionCreate}, TContext> => {

const mutationKey = ['createNewDbConnectionApiV1AdminDbConnectionsPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createNewDbConnectionApiV1AdminDbConnectionsPost>>, {data: DatabaseConnectionCreate}> = (props) => {
          const {data} = props ?? {};

          return  createNewDbConnectionApiV1AdminDbConnectionsPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateNewDbConnectionApiV1AdminDbConnectionsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createNewDbConnectionApiV1AdminDbConnectionsPost>>>
    export type CreateNewDbConnectionApiV1AdminDbConnectionsPostMutationBody = DatabaseConnectionCreate
    export type CreateNewDbConnectionApiV1AdminDbConnectionsPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Create New Db Connection
 */
export const useCreateNewDbConnectionApiV1AdminDbConnectionsPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewDbConnectionApiV1AdminDbConnectionsPost>>, TError,{data: DatabaseConnectionCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createNewDbConnectionApiV1AdminDbConnectionsPost>>,
        TError,
        {data: DatabaseConnectionCreate},
        TContext
      > => {

      const mutationOptions = getCreateNewDbConnectionApiV1AdminDbConnectionsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Read All Db Connections
 */
export const readAllDbConnectionsApiV1AdminDbConnectionsGet = (
    params?: ReadAllDbConnectionsApiV1AdminDbConnectionsGetParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DatabaseConnectionResponse[]>(
      {url: `/api/v1/admin/db_connections/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getReadAllDbConnectionsApiV1AdminDbConnectionsGetQueryKey = (params?: ReadAllDbConnectionsApiV1AdminDbConnectionsGetParams,) => {
    return [`/api/v1/admin/db_connections/`, ...(params ? [params]: [])] as const;
    }

    
export const getReadAllDbConnectionsApiV1AdminDbConnectionsGetQueryOptions = <TData = Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>, TError = ErrorType<HTTPValidationError>>(params?: ReadAllDbConnectionsApiV1AdminDbConnectionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadAllDbConnectionsApiV1AdminDbConnectionsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>> = ({ signal }) => readAllDbConnectionsApiV1AdminDbConnectionsGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadAllDbConnectionsApiV1AdminDbConnectionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>>
export type ReadAllDbConnectionsApiV1AdminDbConnectionsGetQueryError = ErrorType<HTTPValidationError>


export function useReadAllDbConnectionsApiV1AdminDbConnectionsGet<TData = Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>, TError = ErrorType<HTTPValidationError>>(
 params: undefined |  ReadAllDbConnectionsApiV1AdminDbConnectionsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>,
          TError,
          Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllDbConnectionsApiV1AdminDbConnectionsGet<TData = Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllDbConnectionsApiV1AdminDbConnectionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>,
          TError,
          Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllDbConnectionsApiV1AdminDbConnectionsGet<TData = Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllDbConnectionsApiV1AdminDbConnectionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read All Db Connections
 */

export function useReadAllDbConnectionsApiV1AdminDbConnectionsGet<TData = Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllDbConnectionsApiV1AdminDbConnectionsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllDbConnectionsApiV1AdminDbConnectionsGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadAllDbConnectionsApiV1AdminDbConnectionsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Read Db Connection By Id
 */
export const readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet = (
    connId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DatabaseConnectionResponse>(
      {url: `/api/v1/admin/db_connections/${connId}`, method: 'GET', signal
    },
      options);
    }
  

export const getReadDbConnectionByIdApiV1AdminDbConnectionsConnIdGetQueryKey = (connId: number,) => {
    return [`/api/v1/admin/db_connections/${connId}`] as const;
    }

    
export const getReadDbConnectionByIdApiV1AdminDbConnectionsConnIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>, TError = ErrorType<HTTPValidationError>>(connId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadDbConnectionByIdApiV1AdminDbConnectionsConnIdGetQueryKey(connId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>> = ({ signal }) => readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet(connId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(connId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadDbConnectionByIdApiV1AdminDbConnectionsConnIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>>
export type ReadDbConnectionByIdApiV1AdminDbConnectionsConnIdGetQueryError = ErrorType<HTTPValidationError>


export function useReadDbConnectionByIdApiV1AdminDbConnectionsConnIdGet<TData = Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>, TError = ErrorType<HTTPValidationError>>(
 connId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>,
          TError,
          Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadDbConnectionByIdApiV1AdminDbConnectionsConnIdGet<TData = Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>, TError = ErrorType<HTTPValidationError>>(
 connId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>,
          TError,
          Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadDbConnectionByIdApiV1AdminDbConnectionsConnIdGet<TData = Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>, TError = ErrorType<HTTPValidationError>>(
 connId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Db Connection By Id
 */

export function useReadDbConnectionByIdApiV1AdminDbConnectionsConnIdGet<TData = Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>, TError = ErrorType<HTTPValidationError>>(
 connId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readDbConnectionByIdApiV1AdminDbConnectionsConnIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadDbConnectionByIdApiV1AdminDbConnectionsConnIdGetQueryOptions(connId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update Existing Db Connection
 */
export const updateExistingDbConnectionApiV1AdminDbConnectionsConnIdPut = (
    connId: number,
    databaseConnectionUpdate: DatabaseConnectionUpdate,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<DatabaseConnectionResponse>(
      {url: `/api/v1/admin/db_connections/${connId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: databaseConnectionUpdate
    },
      options);
    }
  


export const getUpdateExistingDbConnectionApiV1AdminDbConnectionsConnIdPutMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateExistingDbConnectionApiV1AdminDbConnectionsConnIdPut>>, TError,{connId: number;data: DatabaseConnectionUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateExistingDbConnectionApiV1AdminDbConnectionsConnIdPut>>, TError,{connId: number;data: DatabaseConnectionUpdate}, TContext> => {

const mutationKey = ['updateExistingDbConnectionApiV1AdminDbConnectionsConnIdPut'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateExistingDbConnectionApiV1AdminDbConnectionsConnIdPut>>, {connId: number;data: DatabaseConnectionUpdate}> = (props) => {
          const {connId,data} = props ?? {};

          return  updateExistingDbConnectionApiV1AdminDbConnectionsConnIdPut(connId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateExistingDbConnectionApiV1AdminDbConnectionsConnIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateExistingDbConnectionApiV1AdminDbConnectionsConnIdPut>>>
    export type UpdateExistingDbConnectionApiV1AdminDbConnectionsConnIdPutMutationBody = DatabaseConnectionUpdate
    export type UpdateExistingDbConnectionApiV1AdminDbConnectionsConnIdPutMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Update Existing Db Connection
 */
export const useUpdateExistingDbConnectionApiV1AdminDbConnectionsConnIdPut = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateExistingDbConnectionApiV1AdminDbConnectionsConnIdPut>>, TError,{connId: number;data: DatabaseConnectionUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateExistingDbConnectionApiV1AdminDbConnectionsConnIdPut>>,
        TError,
        {connId: number;data: DatabaseConnectionUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateExistingDbConnectionApiV1AdminDbConnectionsConnIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Delete Db Connection Entry
 */
export const deleteDbConnectionEntryApiV1AdminDbConnectionsConnIdDelete = (
    connId: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/v1/admin/db_connections/${connId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDbConnectionEntryApiV1AdminDbConnectionsConnIdDeleteMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbConnectionEntryApiV1AdminDbConnectionsConnIdDelete>>, TError,{connId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDbConnectionEntryApiV1AdminDbConnectionsConnIdDelete>>, TError,{connId: number}, TContext> => {

const mutationKey = ['deleteDbConnectionEntryApiV1AdminDbConnectionsConnIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDbConnectionEntryApiV1AdminDbConnectionsConnIdDelete>>, {connId: number}> = (props) => {
          const {connId} = props ?? {};

          return  deleteDbConnectionEntryApiV1AdminDbConnectionsConnIdDelete(connId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDbConnectionEntryApiV1AdminDbConnectionsConnIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDbConnectionEntryApiV1AdminDbConnectionsConnIdDelete>>>
    
    export type DeleteDbConnectionEntryApiV1AdminDbConnectionsConnIdDeleteMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Delete Db Connection Entry
 */
export const useDeleteDbConnectionEntryApiV1AdminDbConnectionsConnIdDelete = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDbConnectionEntryApiV1AdminDbConnectionsConnIdDelete>>, TError,{connId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteDbConnectionEntryApiV1AdminDbConnectionsConnIdDelete>>,
        TError,
        {connId: number},
        TContext
      > => {

      const mutationOptions = getDeleteDbConnectionEntryApiV1AdminDbConnectionsConnIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Se conecta a la base de datos de destino y devuelve una lista de sus tablas, esquemas y columnas.
Endpoint esencial para configurar contextos de tipo DATABASE_QUERY.
 * @summary Inspeccionar una Conexi√≥n para listar Tablas y Columnas
 */
export const inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet = (
    connId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DbInspectionResponse>(
      {url: `/api/v1/admin/db_connections/${connId}/inspect`, method: 'GET', signal
    },
      options);
    }
  

export const getInspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGetQueryKey = (connId: number,) => {
    return [`/api/v1/admin/db_connections/${connId}/inspect`] as const;
    }

    
export const getInspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGetQueryOptions = <TData = Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>, TError = ErrorType<HTTPValidationError>>(connId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGetQueryKey(connId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>> = ({ signal }) => inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet(connId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(connId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type InspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGetQueryResult = NonNullable<Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>>
export type InspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGetQueryError = ErrorType<HTTPValidationError>


export function useInspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet<TData = Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>, TError = ErrorType<HTTPValidationError>>(
 connId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>,
          TError,
          Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useInspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet<TData = Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>, TError = ErrorType<HTTPValidationError>>(
 connId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>,
          TError,
          Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useInspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet<TData = Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>, TError = ErrorType<HTTPValidationError>>(
 connId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Inspeccionar una Conexi√≥n para listar Tablas y Columnas
 */

export function useInspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet<TData = Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>, TError = ErrorType<HTTPValidationError>>(
 connId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof inspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getInspectDbConnectionEndpointApiV1AdminDbConnectionsConnIdInspectGetQueryOptions(connId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create New LLM Model Configuration
 */
export const createNewLlmModelConfigApiV1AdminLlmModelsPost = (
    lLMModelConfigCreate: LLMModelConfigCreate,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<LLMModelConfigResponse>(
      {url: `/api/v1/admin/llm-models/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: lLMModelConfigCreate, signal
    },
      options);
    }
  


export const getCreateNewLlmModelConfigApiV1AdminLlmModelsPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewLlmModelConfigApiV1AdminLlmModelsPost>>, TError,{data: LLMModelConfigCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createNewLlmModelConfigApiV1AdminLlmModelsPost>>, TError,{data: LLMModelConfigCreate}, TContext> => {

const mutationKey = ['createNewLlmModelConfigApiV1AdminLlmModelsPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createNewLlmModelConfigApiV1AdminLlmModelsPost>>, {data: LLMModelConfigCreate}> = (props) => {
          const {data} = props ?? {};

          return  createNewLlmModelConfigApiV1AdminLlmModelsPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateNewLlmModelConfigApiV1AdminLlmModelsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createNewLlmModelConfigApiV1AdminLlmModelsPost>>>
    export type CreateNewLlmModelConfigApiV1AdminLlmModelsPostMutationBody = LLMModelConfigCreate
    export type CreateNewLlmModelConfigApiV1AdminLlmModelsPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Create New LLM Model Configuration
 */
export const useCreateNewLlmModelConfigApiV1AdminLlmModelsPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewLlmModelConfigApiV1AdminLlmModelsPost>>, TError,{data: LLMModelConfigCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createNewLlmModelConfigApiV1AdminLlmModelsPost>>,
        TError,
        {data: LLMModelConfigCreate},
        TContext
      > => {

      const mutationOptions = getCreateNewLlmModelConfigApiV1AdminLlmModelsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Read All LLM Model Configurations
 */
export const readAllLlmModelConfigsApiV1AdminLlmModelsGet = (
    params?: ReadAllLlmModelConfigsApiV1AdminLlmModelsGetParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<LLMModelConfigResponse[]>(
      {url: `/api/v1/admin/llm-models/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getReadAllLlmModelConfigsApiV1AdminLlmModelsGetQueryKey = (params?: ReadAllLlmModelConfigsApiV1AdminLlmModelsGetParams,) => {
    return [`/api/v1/admin/llm-models/`, ...(params ? [params]: [])] as const;
    }

    
export const getReadAllLlmModelConfigsApiV1AdminLlmModelsGetQueryOptions = <TData = Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>, TError = ErrorType<HTTPValidationError>>(params?: ReadAllLlmModelConfigsApiV1AdminLlmModelsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadAllLlmModelConfigsApiV1AdminLlmModelsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>> = ({ signal }) => readAllLlmModelConfigsApiV1AdminLlmModelsGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadAllLlmModelConfigsApiV1AdminLlmModelsGetQueryResult = NonNullable<Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>>
export type ReadAllLlmModelConfigsApiV1AdminLlmModelsGetQueryError = ErrorType<HTTPValidationError>


export function useReadAllLlmModelConfigsApiV1AdminLlmModelsGet<TData = Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>, TError = ErrorType<HTTPValidationError>>(
 params: undefined |  ReadAllLlmModelConfigsApiV1AdminLlmModelsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>,
          TError,
          Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllLlmModelConfigsApiV1AdminLlmModelsGet<TData = Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllLlmModelConfigsApiV1AdminLlmModelsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>,
          TError,
          Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllLlmModelConfigsApiV1AdminLlmModelsGet<TData = Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllLlmModelConfigsApiV1AdminLlmModelsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read All LLM Model Configurations
 */

export function useReadAllLlmModelConfigsApiV1AdminLlmModelsGet<TData = Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllLlmModelConfigsApiV1AdminLlmModelsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllLlmModelConfigsApiV1AdminLlmModelsGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadAllLlmModelConfigsApiV1AdminLlmModelsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Read Llm Model Config By Id
 */
export const readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet = (
    modelId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<LLMModelConfigResponse>(
      {url: `/api/v1/admin/llm-models/${modelId}`, method: 'GET', signal
    },
      options);
    }
  

export const getReadLlmModelConfigByIdApiV1AdminLlmModelsModelIdGetQueryKey = (modelId: number,) => {
    return [`/api/v1/admin/llm-models/${modelId}`] as const;
    }

    
export const getReadLlmModelConfigByIdApiV1AdminLlmModelsModelIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>, TError = ErrorType<HTTPValidationError>>(modelId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadLlmModelConfigByIdApiV1AdminLlmModelsModelIdGetQueryKey(modelId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>> = ({ signal }) => readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet(modelId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(modelId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadLlmModelConfigByIdApiV1AdminLlmModelsModelIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>>
export type ReadLlmModelConfigByIdApiV1AdminLlmModelsModelIdGetQueryError = ErrorType<HTTPValidationError>


export function useReadLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet<TData = Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>, TError = ErrorType<HTTPValidationError>>(
 modelId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>,
          TError,
          Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet<TData = Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>, TError = ErrorType<HTTPValidationError>>(
 modelId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>,
          TError,
          Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet<TData = Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>, TError = ErrorType<HTTPValidationError>>(
 modelId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Llm Model Config By Id
 */

export function useReadLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet<TData = Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>, TError = ErrorType<HTTPValidationError>>(
 modelId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readLlmModelConfigByIdApiV1AdminLlmModelsModelIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadLlmModelConfigByIdApiV1AdminLlmModelsModelIdGetQueryOptions(modelId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update Existing Llm Model Config
 */
export const updateExistingLlmModelConfigApiV1AdminLlmModelsModelIdPut = (
    modelId: number,
    lLMModelConfigUpdate: LLMModelConfigUpdate,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<LLMModelConfigResponse>(
      {url: `/api/v1/admin/llm-models/${modelId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: lLMModelConfigUpdate
    },
      options);
    }
  


export const getUpdateExistingLlmModelConfigApiV1AdminLlmModelsModelIdPutMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateExistingLlmModelConfigApiV1AdminLlmModelsModelIdPut>>, TError,{modelId: number;data: LLMModelConfigUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateExistingLlmModelConfigApiV1AdminLlmModelsModelIdPut>>, TError,{modelId: number;data: LLMModelConfigUpdate}, TContext> => {

const mutationKey = ['updateExistingLlmModelConfigApiV1AdminLlmModelsModelIdPut'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateExistingLlmModelConfigApiV1AdminLlmModelsModelIdPut>>, {modelId: number;data: LLMModelConfigUpdate}> = (props) => {
          const {modelId,data} = props ?? {};

          return  updateExistingLlmModelConfigApiV1AdminLlmModelsModelIdPut(modelId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateExistingLlmModelConfigApiV1AdminLlmModelsModelIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateExistingLlmModelConfigApiV1AdminLlmModelsModelIdPut>>>
    export type UpdateExistingLlmModelConfigApiV1AdminLlmModelsModelIdPutMutationBody = LLMModelConfigUpdate
    export type UpdateExistingLlmModelConfigApiV1AdminLlmModelsModelIdPutMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Update Existing Llm Model Config
 */
export const useUpdateExistingLlmModelConfigApiV1AdminLlmModelsModelIdPut = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateExistingLlmModelConfigApiV1AdminLlmModelsModelIdPut>>, TError,{modelId: number;data: LLMModelConfigUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateExistingLlmModelConfigApiV1AdminLlmModelsModelIdPut>>,
        TError,
        {modelId: number;data: LLMModelConfigUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateExistingLlmModelConfigApiV1AdminLlmModelsModelIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Delete Llm Model Configuration
 */
export const deleteLlmModelConfigurationApiV1AdminLlmModelsModelIdDelete = (
    modelId: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/v1/admin/llm-models/${modelId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteLlmModelConfigurationApiV1AdminLlmModelsModelIdDeleteMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLlmModelConfigurationApiV1AdminLlmModelsModelIdDelete>>, TError,{modelId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteLlmModelConfigurationApiV1AdminLlmModelsModelIdDelete>>, TError,{modelId: number}, TContext> => {

const mutationKey = ['deleteLlmModelConfigurationApiV1AdminLlmModelsModelIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLlmModelConfigurationApiV1AdminLlmModelsModelIdDelete>>, {modelId: number}> = (props) => {
          const {modelId} = props ?? {};

          return  deleteLlmModelConfigurationApiV1AdminLlmModelsModelIdDelete(modelId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLlmModelConfigurationApiV1AdminLlmModelsModelIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLlmModelConfigurationApiV1AdminLlmModelsModelIdDelete>>>
    
    export type DeleteLlmModelConfigurationApiV1AdminLlmModelsModelIdDeleteMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Delete Llm Model Configuration
 */
export const useDeleteLlmModelConfigurationApiV1AdminLlmModelsModelIdDelete = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLlmModelConfigurationApiV1AdminLlmModelsModelIdDelete>>, TError,{modelId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteLlmModelConfigurationApiV1AdminLlmModelsModelIdDelete>>,
        TError,
        {modelId: number},
        TContext
      > => {

      const mutationOptions = getDeleteLlmModelConfigurationApiV1AdminLlmModelsModelIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Create New Virtual Agent Profile
 */
export const createNewVirtualAgentProfileApiV1AdminVirtualAgentProfilesPost = (
    virtualAgentProfileCreate: VirtualAgentProfileCreate,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<VirtualAgentProfileResponse>(
      {url: `/api/v1/admin/virtual-agent-profiles/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: virtualAgentProfileCreate, signal
    },
      options);
    }
  


export const getCreateNewVirtualAgentProfileApiV1AdminVirtualAgentProfilesPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewVirtualAgentProfileApiV1AdminVirtualAgentProfilesPost>>, TError,{data: VirtualAgentProfileCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createNewVirtualAgentProfileApiV1AdminVirtualAgentProfilesPost>>, TError,{data: VirtualAgentProfileCreate}, TContext> => {

const mutationKey = ['createNewVirtualAgentProfileApiV1AdminVirtualAgentProfilesPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createNewVirtualAgentProfileApiV1AdminVirtualAgentProfilesPost>>, {data: VirtualAgentProfileCreate}> = (props) => {
          const {data} = props ?? {};

          return  createNewVirtualAgentProfileApiV1AdminVirtualAgentProfilesPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateNewVirtualAgentProfileApiV1AdminVirtualAgentProfilesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createNewVirtualAgentProfileApiV1AdminVirtualAgentProfilesPost>>>
    export type CreateNewVirtualAgentProfileApiV1AdminVirtualAgentProfilesPostMutationBody = VirtualAgentProfileCreate
    export type CreateNewVirtualAgentProfileApiV1AdminVirtualAgentProfilesPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Create New Virtual Agent Profile
 */
export const useCreateNewVirtualAgentProfileApiV1AdminVirtualAgentProfilesPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNewVirtualAgentProfileApiV1AdminVirtualAgentProfilesPost>>, TError,{data: VirtualAgentProfileCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createNewVirtualAgentProfileApiV1AdminVirtualAgentProfilesPost>>,
        TError,
        {data: VirtualAgentProfileCreate},
        TContext
      > => {

      const mutationOptions = getCreateNewVirtualAgentProfileApiV1AdminVirtualAgentProfilesPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Read All Virtual Agent Profiles
 */
export const readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet = (
    params?: ReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGetParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<VirtualAgentProfileResponse[]>(
      {url: `/api/v1/admin/virtual-agent-profiles/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGetQueryKey = (params?: ReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGetParams,) => {
    return [`/api/v1/admin/virtual-agent-profiles/`, ...(params ? [params]: [])] as const;
    }

    
export const getReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGetQueryOptions = <TData = Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>, TError = ErrorType<HTTPValidationError>>(params?: ReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>> = ({ signal }) => readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGetQueryResult = NonNullable<Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>>
export type ReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGetQueryError = ErrorType<HTTPValidationError>


export function useReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet<TData = Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>, TError = ErrorType<HTTPValidationError>>(
 params: undefined |  ReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>,
          TError,
          Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet<TData = Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>,
          TError,
          Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet<TData = Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read All Virtual Agent Profiles
 */

export function useReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet<TData = Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadAllVirtualAgentProfilesApiV1AdminVirtualAgentProfilesGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Read Virtual Agent Profile by ID
 */
export const readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet = (
    profileId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<VirtualAgentProfileResponse>(
      {url: `/api/v1/admin/virtual-agent-profiles/${profileId}`, method: 'GET', signal
    },
      options);
    }
  

export const getReadVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGetQueryKey = (profileId: number,) => {
    return [`/api/v1/admin/virtual-agent-profiles/${profileId}`] as const;
    }

    
export const getReadVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>, TError = ErrorType<HTTPValidationError>>(profileId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGetQueryKey(profileId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>> = ({ signal }) => readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet(profileId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(profileId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>>
export type ReadVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGetQueryError = ErrorType<HTTPValidationError>


export function useReadVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet<TData = Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>, TError = ErrorType<HTTPValidationError>>(
 profileId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>,
          TError,
          Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet<TData = Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>, TError = ErrorType<HTTPValidationError>>(
 profileId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>,
          TError,
          Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet<TData = Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>, TError = ErrorType<HTTPValidationError>>(
 profileId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Virtual Agent Profile by ID
 */

export function useReadVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet<TData = Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>, TError = ErrorType<HTTPValidationError>>(
 profileId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadVirtualAgentProfileByIdApiV1AdminVirtualAgentProfilesProfileIdGetQueryOptions(profileId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update Existing Virtual Agent Profile
 */
export const updateExistingVirtualAgentProfileApiV1AdminVirtualAgentProfilesProfileIdPut = (
    profileId: number,
    virtualAgentProfileUpdate: VirtualAgentProfileUpdate,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<VirtualAgentProfileResponse>(
      {url: `/api/v1/admin/virtual-agent-profiles/${profileId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: virtualAgentProfileUpdate
    },
      options);
    }
  


export const getUpdateExistingVirtualAgentProfileApiV1AdminVirtualAgentProfilesProfileIdPutMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateExistingVirtualAgentProfileApiV1AdminVirtualAgentProfilesProfileIdPut>>, TError,{profileId: number;data: VirtualAgentProfileUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateExistingVirtualAgentProfileApiV1AdminVirtualAgentProfilesProfileIdPut>>, TError,{profileId: number;data: VirtualAgentProfileUpdate}, TContext> => {

const mutationKey = ['updateExistingVirtualAgentProfileApiV1AdminVirtualAgentProfilesProfileIdPut'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateExistingVirtualAgentProfileApiV1AdminVirtualAgentProfilesProfileIdPut>>, {profileId: number;data: VirtualAgentProfileUpdate}> = (props) => {
          const {profileId,data} = props ?? {};

          return  updateExistingVirtualAgentProfileApiV1AdminVirtualAgentProfilesProfileIdPut(profileId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateExistingVirtualAgentProfileApiV1AdminVirtualAgentProfilesProfileIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateExistingVirtualAgentProfileApiV1AdminVirtualAgentProfilesProfileIdPut>>>
    export type UpdateExistingVirtualAgentProfileApiV1AdminVirtualAgentProfilesProfileIdPutMutationBody = VirtualAgentProfileUpdate
    export type UpdateExistingVirtualAgentProfileApiV1AdminVirtualAgentProfilesProfileIdPutMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Update Existing Virtual Agent Profile
 */
export const useUpdateExistingVirtualAgentProfileApiV1AdminVirtualAgentProfilesProfileIdPut = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateExistingVirtualAgentProfileApiV1AdminVirtualAgentProfilesProfileIdPut>>, TError,{profileId: number;data: VirtualAgentProfileUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateExistingVirtualAgentProfileApiV1AdminVirtualAgentProfilesProfileIdPut>>,
        TError,
        {profileId: number;data: VirtualAgentProfileUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateExistingVirtualAgentProfileApiV1AdminVirtualAgentProfilesProfileIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Delete Virtual Agent Profile
 */
export const deleteVirtualAgentProfileEntryApiV1AdminVirtualAgentProfilesProfileIdDelete = (
    profileId: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/v1/admin/virtual-agent-profiles/${profileId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteVirtualAgentProfileEntryApiV1AdminVirtualAgentProfilesProfileIdDeleteMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVirtualAgentProfileEntryApiV1AdminVirtualAgentProfilesProfileIdDelete>>, TError,{profileId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVirtualAgentProfileEntryApiV1AdminVirtualAgentProfilesProfileIdDelete>>, TError,{profileId: number}, TContext> => {

const mutationKey = ['deleteVirtualAgentProfileEntryApiV1AdminVirtualAgentProfilesProfileIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVirtualAgentProfileEntryApiV1AdminVirtualAgentProfilesProfileIdDelete>>, {profileId: number}> = (props) => {
          const {profileId} = props ?? {};

          return  deleteVirtualAgentProfileEntryApiV1AdminVirtualAgentProfilesProfileIdDelete(profileId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVirtualAgentProfileEntryApiV1AdminVirtualAgentProfilesProfileIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVirtualAgentProfileEntryApiV1AdminVirtualAgentProfilesProfileIdDelete>>>
    
    export type DeleteVirtualAgentProfileEntryApiV1AdminVirtualAgentProfilesProfileIdDeleteMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Delete Virtual Agent Profile
 */
export const useDeleteVirtualAgentProfileEntryApiV1AdminVirtualAgentProfilesProfileIdDelete = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVirtualAgentProfileEntryApiV1AdminVirtualAgentProfilesProfileIdDelete>>, TError,{profileId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteVirtualAgentProfileEntryApiV1AdminVirtualAgentProfilesProfileIdDelete>>,
        TError,
        {profileId: number},
        TContext
      > => {

      const mutationOptions = getDeleteVirtualAgentProfileEntryApiV1AdminVirtualAgentProfilesProfileIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Este endpoint genera el CONJUNTO COMPLETO de prompts (saludo, confirmaci√≥n, y sistema)
para un Agente Virtual, utilizando un LLM maestro.
 * @summary [IA] Genera un Conjunto de Prompts para un Agente
 */
export const generateOptimizedPromptEndpointApiV1AdminVirtualAgentProfilesGeneratePromptPost = (
    generatePromptRequest: GeneratePromptRequest,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<GeneratedPromptSetResponse>(
      {url: `/api/v1/admin/virtual-agent-profiles/generate-prompt`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: generatePromptRequest, signal
    },
      options);
    }
  


export const getGenerateOptimizedPromptEndpointApiV1AdminVirtualAgentProfilesGeneratePromptPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateOptimizedPromptEndpointApiV1AdminVirtualAgentProfilesGeneratePromptPost>>, TError,{data: GeneratePromptRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof generateOptimizedPromptEndpointApiV1AdminVirtualAgentProfilesGeneratePromptPost>>, TError,{data: GeneratePromptRequest}, TContext> => {

const mutationKey = ['generateOptimizedPromptEndpointApiV1AdminVirtualAgentProfilesGeneratePromptPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof generateOptimizedPromptEndpointApiV1AdminVirtualAgentProfilesGeneratePromptPost>>, {data: GeneratePromptRequest}> = (props) => {
          const {data} = props ?? {};

          return  generateOptimizedPromptEndpointApiV1AdminVirtualAgentProfilesGeneratePromptPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GenerateOptimizedPromptEndpointApiV1AdminVirtualAgentProfilesGeneratePromptPostMutationResult = NonNullable<Awaited<ReturnType<typeof generateOptimizedPromptEndpointApiV1AdminVirtualAgentProfilesGeneratePromptPost>>>
    export type GenerateOptimizedPromptEndpointApiV1AdminVirtualAgentProfilesGeneratePromptPostMutationBody = GeneratePromptRequest
    export type GenerateOptimizedPromptEndpointApiV1AdminVirtualAgentProfilesGeneratePromptPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary [IA] Genera un Conjunto de Prompts para un Agente
 */
export const useGenerateOptimizedPromptEndpointApiV1AdminVirtualAgentProfilesGeneratePromptPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateOptimizedPromptEndpointApiV1AdminVirtualAgentProfilesGeneratePromptPost>>, TError,{data: GeneratePromptRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof generateOptimizedPromptEndpointApiV1AdminVirtualAgentProfilesGeneratePromptPost>>,
        TError,
        {data: GeneratePromptRequest},
        TContext
      > => {

      const mutationOptions = getGenerateOptimizedPromptEndpointApiV1AdminVirtualAgentProfilesGeneratePromptPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Create Human Agent Group
 */
export const createHumanAgentGroupEndpointApiV1HumanAgentGroupsPost = (
    humanAgentGroupCreate: HumanAgentGroupCreate,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<HumanAgentGroupResponse>(
      {url: `/api/v1/human-agent-groups/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: humanAgentGroupCreate, signal
    },
      options);
    }
  


export const getCreateHumanAgentGroupEndpointApiV1HumanAgentGroupsPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createHumanAgentGroupEndpointApiV1HumanAgentGroupsPost>>, TError,{data: HumanAgentGroupCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createHumanAgentGroupEndpointApiV1HumanAgentGroupsPost>>, TError,{data: HumanAgentGroupCreate}, TContext> => {

const mutationKey = ['createHumanAgentGroupEndpointApiV1HumanAgentGroupsPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createHumanAgentGroupEndpointApiV1HumanAgentGroupsPost>>, {data: HumanAgentGroupCreate}> = (props) => {
          const {data} = props ?? {};

          return  createHumanAgentGroupEndpointApiV1HumanAgentGroupsPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateHumanAgentGroupEndpointApiV1HumanAgentGroupsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createHumanAgentGroupEndpointApiV1HumanAgentGroupsPost>>>
    export type CreateHumanAgentGroupEndpointApiV1HumanAgentGroupsPostMutationBody = HumanAgentGroupCreate
    export type CreateHumanAgentGroupEndpointApiV1HumanAgentGroupsPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Create Human Agent Group
 */
export const useCreateHumanAgentGroupEndpointApiV1HumanAgentGroupsPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createHumanAgentGroupEndpointApiV1HumanAgentGroupsPost>>, TError,{data: HumanAgentGroupCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createHumanAgentGroupEndpointApiV1HumanAgentGroupsPost>>,
        TError,
        {data: HumanAgentGroupCreate},
        TContext
      > => {

      const mutationOptions = getCreateHumanAgentGroupEndpointApiV1HumanAgentGroupsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Read All Human Agent Groups
 */
export const readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet = (
    params?: ReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGetParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<HumanAgentGroupResponse[]>(
      {url: `/api/v1/human-agent-groups/human-agent-groups`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGetQueryKey = (params?: ReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGetParams,) => {
    return [`/api/v1/human-agent-groups/human-agent-groups`, ...(params ? [params]: [])] as const;
    }

    
export const getReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGetQueryOptions = <TData = Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>, TError = ErrorType<HTTPValidationError>>(params?: ReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>> = ({ signal }) => readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGetQueryResult = NonNullable<Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>>
export type ReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGetQueryError = ErrorType<HTTPValidationError>


export function useReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet<TData = Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>, TError = ErrorType<HTTPValidationError>>(
 params: undefined |  ReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>,
          TError,
          Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet<TData = Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>,
          TError,
          Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet<TData = Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read All Human Agent Groups
 */

export function useReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet<TData = Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadAllHumanAgentGroupsEndpointApiV1HumanAgentGroupsHumanAgentGroupsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Read Human Agent Group by ID
 */
export const readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet = (
    groupId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<HumanAgentGroupResponse>(
      {url: `/api/v1/human-agent-groups/human-agent-groups/${groupId}`, method: 'GET', signal
    },
      options);
    }
  

export const getReadHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGetQueryKey = (groupId: number,) => {
    return [`/api/v1/human-agent-groups/human-agent-groups/${groupId}`] as const;
    }

    
export const getReadHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>, TError = ErrorType<HTTPValidationError>>(groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGetQueryKey(groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>> = ({ signal }) => readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet(groupId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>>
export type ReadHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGetQueryError = ErrorType<HTTPValidationError>


export function useReadHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet<TData = Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>, TError = ErrorType<HTTPValidationError>>(
 groupId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>,
          TError,
          Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet<TData = Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>, TError = ErrorType<HTTPValidationError>>(
 groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>,
          TError,
          Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet<TData = Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>, TError = ErrorType<HTTPValidationError>>(
 groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Human Agent Group by ID
 */

export function useReadHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet<TData = Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>, TError = ErrorType<HTTPValidationError>>(
 groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadHumanAgentGroupByIdEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdGetQueryOptions(groupId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update Human Agent Group
 */
export const updateHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdPut = (
    groupId: number,
    humanAgentGroupUpdate: HumanAgentGroupUpdate,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<HumanAgentGroupResponse>(
      {url: `/api/v1/human-agent-groups/human-agent-groups/${groupId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: humanAgentGroupUpdate
    },
      options);
    }
  


export const getUpdateHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdPutMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdPut>>, TError,{groupId: number;data: HumanAgentGroupUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdPut>>, TError,{groupId: number;data: HumanAgentGroupUpdate}, TContext> => {

const mutationKey = ['updateHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdPut'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdPut>>, {groupId: number;data: HumanAgentGroupUpdate}> = (props) => {
          const {groupId,data} = props ?? {};

          return  updateHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdPut(groupId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdPut>>>
    export type UpdateHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdPutMutationBody = HumanAgentGroupUpdate
    export type UpdateHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdPutMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Update Human Agent Group
 */
export const useUpdateHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdPut = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdPut>>, TError,{groupId: number;data: HumanAgentGroupUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdPut>>,
        TError,
        {groupId: number;data: HumanAgentGroupUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Delete Human Agent Group
 */
export const deleteHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdDelete = (
    groupId: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/v1/human-agent-groups/human-agent-groups/${groupId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdDeleteMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdDelete>>, TError,{groupId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdDelete>>, TError,{groupId: number}, TContext> => {

const mutationKey = ['deleteHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdDelete>>, {groupId: number}> = (props) => {
          const {groupId} = props ?? {};

          return  deleteHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdDelete(groupId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdDelete>>>
    
    export type DeleteHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdDeleteMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Delete Human Agent Group
 */
export const useDeleteHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdDelete = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdDelete>>, TError,{groupId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdDelete>>,
        TError,
        {groupId: number},
        TContext
      > => {

      const mutationOptions = getDeleteHumanAgentGroupEndpointApiV1HumanAgentGroupsHumanAgentGroupsGroupIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Create Human Agent
 */
export const createHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsPost = (
    humanAgentCreate: HumanAgentCreate,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<HumanAgentResponse>(
      {url: `/api/v1/human-agent-groups/human-agents`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: humanAgentCreate, signal
    },
      options);
    }
  


export const getCreateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsPost>>, TError,{data: HumanAgentCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsPost>>, TError,{data: HumanAgentCreate}, TContext> => {

const mutationKey = ['createHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsPost>>, {data: HumanAgentCreate}> = (props) => {
          const {data} = props ?? {};

          return  createHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsPost>>>
    export type CreateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsPostMutationBody = HumanAgentCreate
    export type CreateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Create Human Agent
 */
export const useCreateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsPost>>, TError,{data: HumanAgentCreate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsPost>>,
        TError,
        {data: HumanAgentCreate},
        TContext
      > => {

      const mutationOptions = getCreateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Read All Human Agents
 */
export const readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet = (
    params?: ReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGetParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<HumanAgentResponse[]>(
      {url: `/api/v1/human-agent-groups/human-agents`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGetQueryKey = (params?: ReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGetParams,) => {
    return [`/api/v1/human-agent-groups/human-agents`, ...(params ? [params]: [])] as const;
    }

    
export const getReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGetQueryOptions = <TData = Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>, TError = ErrorType<HTTPValidationError>>(params?: ReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>> = ({ signal }) => readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGetQueryResult = NonNullable<Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>>
export type ReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGetQueryError = ErrorType<HTTPValidationError>


export function useReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet<TData = Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>, TError = ErrorType<HTTPValidationError>>(
 params: undefined |  ReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>,
          TError,
          Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet<TData = Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>,
          TError,
          Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet<TData = Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read All Human Agents
 */

export function useReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet<TData = Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadAllHumanAgentsEndpointApiV1HumanAgentGroupsHumanAgentsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Read Human Agent by ID
 */
export const readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet = (
    agentId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<HumanAgentResponse>(
      {url: `/api/v1/human-agent-groups/human-agents/${agentId}`, method: 'GET', signal
    },
      options);
    }
  

export const getReadHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGetQueryKey = (agentId: number,) => {
    return [`/api/v1/human-agent-groups/human-agents/${agentId}`] as const;
    }

    
export const getReadHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>, TError = ErrorType<HTTPValidationError>>(agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGetQueryKey(agentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>> = ({ signal }) => readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet(agentId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(agentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>>
export type ReadHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGetQueryError = ErrorType<HTTPValidationError>


export function useReadHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet<TData = Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>, TError = ErrorType<HTTPValidationError>>(
 agentId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>,
          TError,
          Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet<TData = Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>, TError = ErrorType<HTTPValidationError>>(
 agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>,
          TError,
          Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet<TData = Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>, TError = ErrorType<HTTPValidationError>>(
 agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Human Agent by ID
 */

export function useReadHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet<TData = Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>, TError = ErrorType<HTTPValidationError>>(
 agentId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadHumanAgentByIdEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdGetQueryOptions(agentId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update Human Agent
 */
export const updateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdPut = (
    agentId: number,
    humanAgentUpdate: HumanAgentUpdate,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<HumanAgentResponse>(
      {url: `/api/v1/human-agent-groups/human-agents/${agentId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: humanAgentUpdate
    },
      options);
    }
  


export const getUpdateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdPutMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdPut>>, TError,{agentId: number;data: HumanAgentUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdPut>>, TError,{agentId: number;data: HumanAgentUpdate}, TContext> => {

const mutationKey = ['updateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdPut'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdPut>>, {agentId: number;data: HumanAgentUpdate}> = (props) => {
          const {agentId,data} = props ?? {};

          return  updateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdPut(agentId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdPut>>>
    export type UpdateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdPutMutationBody = HumanAgentUpdate
    export type UpdateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdPutMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Update Human Agent
 */
export const useUpdateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdPut = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdPut>>, TError,{agentId: number;data: HumanAgentUpdate}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdPut>>,
        TError,
        {agentId: number;data: HumanAgentUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Delete Human Agent
 */
export const deleteHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdDelete = (
    agentId: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/v1/human-agent-groups/human-agents/${agentId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdDeleteMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdDelete>>, TError,{agentId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdDelete>>, TError,{agentId: number}, TContext> => {

const mutationKey = ['deleteHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdDelete>>, {agentId: number}> = (props) => {
          const {agentId} = props ?? {};

          return  deleteHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdDelete(agentId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdDelete>>>
    
    export type DeleteHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdDeleteMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Delete Human Agent
 */
export const useDeleteHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdDelete = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdDelete>>, TError,{agentId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdDelete>>,
        TError,
        {agentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteHumanAgentEndpointApiV1HumanAgentGroupsHumanAgentsAgentIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Health Check Endpoint
 */
export const healthCheckHealthGet = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<unknown>(
      {url: `/health`, method: 'GET', signal
    },
      options);
    }
  

export const getHealthCheckHealthGetQueryKey = () => {
    return [`/health`] as const;
    }

    
export const getHealthCheckHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckHealthGet>>> = ({ signal }) => healthCheckHealthGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckHealthGet>>>
export type HealthCheckHealthGetQueryError = ErrorType<unknown>


export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckHealthGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckHealthGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check Endpoint
 */

export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




