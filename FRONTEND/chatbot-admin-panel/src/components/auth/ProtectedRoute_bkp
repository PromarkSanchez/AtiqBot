// src/components/auth/ProtectedRoute.tsx
import React from 'react';
import { Navigate, Outlet, useLocation } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
// Ya NO importamos AdminLayout aquí, se maneja en App.tsx

const ProtectedRoute: React.FC = () => {
  const { isAuthenticated, isLoading } = useAuth();
  const location = useLocation();

  // Los console.log están bien para depuración
  // console.log('[ProtectedRoute]', { isAuthenticated, isLoading, pathname: location.pathname });

  if (isLoading) {
    // console.log('[ProtectedRoute] isLoading es true, mostrando loader.');
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200 text-xl">
        Cargando Sesión...
      </div>
    );
  }

  if (!isAuthenticated) {
    // console.log('[ProtectedRoute] NO autenticado, redirigiendo a /login.');
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // console.log('[ProtectedRoute] Autenticado, renderizando Outlet para la ruta hija.');
  // Si está autenticado, simplemente renderiza el <Outlet />.
  // La ruta padre en App.tsx (/admin) ya se encarga de renderizar AdminLayout,
  // y esta instancia de Outlet permitirá que la ruta hija (ej. AdminUsersPage) se renderice DENTRO de AdminLayout.
  return <Outlet />;
};

export default ProtectedRoute;